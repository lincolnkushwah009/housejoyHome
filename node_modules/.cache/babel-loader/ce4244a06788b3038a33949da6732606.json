{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.getChangedFilesForRoots = exports.findRepos = void 0;\n\nfunction _throat() {\n  const data = _interopRequireDefault(require('throat'));\n\n  _throat = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _git = _interopRequireDefault(require('./git'));\n\nvar _hg = _interopRequireDefault(require('./hg'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\nfunction notEmpty(value) {\n  return value != null;\n} // This is an arbitrary number. The main goal is to prevent projects with\n// many roots (50+) from spawning too many processes at once.\n\n\nconst mutex = (0, _throat().default)(5);\n\nconst findGitRoot = dir => mutex(() => _git.default.getRoot(dir));\n\nconst findHgRoot = dir => mutex(() => _hg.default.getRoot(dir));\n\nconst getChangedFilesForRoots = async (roots, options) => {\n  const repos = await findRepos(roots);\n  const changedFilesOptions = {\n    includePaths: roots,\n    ...options\n  };\n  const gitPromises = Array.from(repos.git).map(repo => _git.default.findChangedFiles(repo, changedFilesOptions));\n  const hgPromises = Array.from(repos.hg).map(repo => _hg.default.findChangedFiles(repo, changedFilesOptions));\n  const changedFiles = (await Promise.all(gitPromises.concat(hgPromises))).reduce((allFiles, changedFilesInTheRepo) => {\n    for (const file of changedFilesInTheRepo) {\n      allFiles.add(file);\n    }\n\n    return allFiles;\n  }, new Set());\n  return {\n    changedFiles,\n    repos\n  };\n};\n\nexports.getChangedFilesForRoots = getChangedFilesForRoots;\n\nconst findRepos = async roots => {\n  const gitRepos = await Promise.all(roots.reduce((promises, root) => promises.concat(findGitRoot(root)), []));\n  const hgRepos = await Promise.all(roots.reduce((promises, root) => promises.concat(findHgRoot(root)), []));\n  return {\n    git: new Set(gitRepos.filter(notEmpty)),\n    hg: new Set(hgRepos.filter(notEmpty))\n  };\n};\n\nexports.findRepos = findRepos;","map":{"version":3,"names":["Object","defineProperty","exports","value","getChangedFilesForRoots","findRepos","_throat","data","_interopRequireDefault","require","_git","_hg","obj","__esModule","default","notEmpty","mutex","findGitRoot","dir","getRoot","findHgRoot","roots","options","repos","changedFilesOptions","includePaths","gitPromises","Array","from","git","map","repo","findChangedFiles","hgPromises","hg","changedFiles","Promise","all","concat","reduce","allFiles","changedFilesInTheRepo","file","add","Set","gitRepos","promises","root","hgRepos","filter"],"sources":["/Users/lincolnkushwah/Desktop/All/React Projects/house_joy_new/node_modules/jest-changed-files/build/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.getChangedFilesForRoots = exports.findRepos = void 0;\n\nfunction _throat() {\n  const data = _interopRequireDefault(require('throat'));\n\n  _throat = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _git = _interopRequireDefault(require('./git'));\n\nvar _hg = _interopRequireDefault(require('./hg'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction notEmpty(value) {\n  return value != null;\n} // This is an arbitrary number. The main goal is to prevent projects with\n// many roots (50+) from spawning too many processes at once.\n\nconst mutex = (0, _throat().default)(5);\n\nconst findGitRoot = dir => mutex(() => _git.default.getRoot(dir));\n\nconst findHgRoot = dir => mutex(() => _hg.default.getRoot(dir));\n\nconst getChangedFilesForRoots = async (roots, options) => {\n  const repos = await findRepos(roots);\n  const changedFilesOptions = {\n    includePaths: roots,\n    ...options\n  };\n  const gitPromises = Array.from(repos.git).map(repo =>\n    _git.default.findChangedFiles(repo, changedFilesOptions)\n  );\n  const hgPromises = Array.from(repos.hg).map(repo =>\n    _hg.default.findChangedFiles(repo, changedFilesOptions)\n  );\n  const changedFiles = (\n    await Promise.all(gitPromises.concat(hgPromises))\n  ).reduce((allFiles, changedFilesInTheRepo) => {\n    for (const file of changedFilesInTheRepo) {\n      allFiles.add(file);\n    }\n\n    return allFiles;\n  }, new Set());\n  return {\n    changedFiles,\n    repos\n  };\n};\n\nexports.getChangedFilesForRoots = getChangedFilesForRoots;\n\nconst findRepos = async roots => {\n  const gitRepos = await Promise.all(\n    roots.reduce((promises, root) => promises.concat(findGitRoot(root)), [])\n  );\n  const hgRepos = await Promise.all(\n    roots.reduce((promises, root) => promises.concat(findHgRoot(root)), [])\n  );\n  return {\n    git: new Set(gitRepos.filter(notEmpty)),\n    hg: new Set(hgRepos.filter(notEmpty))\n  };\n};\n\nexports.findRepos = findRepos;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}