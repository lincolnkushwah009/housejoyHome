{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = jestHoist;\n\nfunction _template() {\n  const data = require('@babel/template');\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = require('@babel/types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\nconst JEST_GLOBAL_NAME = 'jest';\nconst JEST_GLOBALS_MODULE_NAME = '@jest/globals';\nconst JEST_GLOBALS_MODULE_JEST_EXPORT_NAME = 'jest';\nconst hoistedVariables = new WeakSet(); // We allow `jest`, `expect`, `require`, all default Node.js globals and all\n// ES2015 built-ins to be used inside of a `jest.mock` factory.\n// We also allow variables prefixed with `mock` as an escape-hatch.\n\nconst ALLOWED_IDENTIFIERS = new Set(['Array', 'ArrayBuffer', 'Boolean', 'BigInt', 'DataView', 'Date', 'Error', 'EvalError', 'Float32Array', 'Float64Array', 'Function', 'Generator', 'GeneratorFunction', 'Infinity', 'Int16Array', 'Int32Array', 'Int8Array', 'InternalError', 'Intl', 'JSON', 'Map', 'Math', 'NaN', 'Number', 'Object', 'Promise', 'Proxy', 'RangeError', 'ReferenceError', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'SyntaxError', 'TypeError', 'URIError', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray', 'WeakMap', 'WeakSet', 'arguments', 'console', 'expect', 'isNaN', 'jest', 'parseFloat', 'parseInt', 'exports', 'require', 'module', '__filename', '__dirname', 'undefined', ...Object.getOwnPropertyNames(global)].sort());\nconst IDVisitor = {\n  ReferencedIdentifier(path, _ref) {\n    let {\n      ids\n    } = _ref;\n    ids.add(path);\n  },\n\n  blacklist: ['TypeAnnotation', 'TSTypeAnnotation', 'TSTypeReference']\n};\nconst FUNCTIONS = Object.create(null);\n\nFUNCTIONS.mock = args => {\n  if (args.length === 1) {\n    return args[0].isStringLiteral() || args[0].isLiteral();\n  } else if (args.length === 2 || args.length === 3) {\n    const moduleFactory = args[1];\n\n    if (!moduleFactory.isFunction()) {\n      throw moduleFactory.buildCodeFrameError('The second argument of `jest.mock` must be an inline function.\\n', TypeError);\n    }\n\n    const ids = new Set();\n    const parentScope = moduleFactory.parentPath.scope; // @ts-expect-error: ReferencedIdentifier and blacklist are not known on visitors\n\n    moduleFactory.traverse(IDVisitor, {\n      ids\n    });\n\n    for (const id of ids) {\n      const {\n        name\n      } = id.node;\n      let found = false;\n      let scope = id.scope;\n\n      while (scope !== parentScope) {\n        if (scope.bindings[name]) {\n          found = true;\n          break;\n        }\n\n        scope = scope.parent;\n      }\n\n      if (!found) {\n        let isAllowedIdentifier = scope.hasGlobal(name) && ALLOWED_IDENTIFIERS.has(name) || /^mock/i.test(name) || // Allow istanbul's coverage variable to pass.\n        /^(?:__)?cov/.test(name);\n\n        if (!isAllowedIdentifier) {\n          const binding = scope.bindings[name];\n\n          if (binding !== null && binding !== void 0 && binding.path.isVariableDeclarator()) {\n            const {\n              node\n            } = binding.path;\n            const initNode = node.init;\n\n            if (initNode && binding.constant && scope.isPure(initNode, true)) {\n              hoistedVariables.add(node);\n              isAllowedIdentifier = true;\n            }\n          }\n        }\n\n        if (!isAllowedIdentifier) {\n          throw id.buildCodeFrameError('The module factory of `jest.mock()` is not allowed to ' + 'reference any out-of-scope variables.\\n' + 'Invalid variable access: ' + name + '\\n' + 'Allowed objects: ' + Array.from(ALLOWED_IDENTIFIERS).join(', ') + '.\\n' + 'Note: This is a precaution to guard against uninitialized mock ' + 'variables. If it is ensured that the mock is required lazily, ' + 'variable names prefixed with `mock` (case insensitive) are permitted.\\n', ReferenceError);\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nFUNCTIONS.unmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.deepUnmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = args => args.length === 0;\n\nconst createJestObjectGetter = (0, _template().statement)`\nfunction GETTER_NAME() {\n  const { JEST_GLOBALS_MODULE_JEST_EXPORT_NAME } = require(\"JEST_GLOBALS_MODULE_NAME\");\n  GETTER_NAME = () => JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n  return JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n}\n`;\n\nconst isJestObject = expression => {\n  // global\n  if (expression.isIdentifier() && expression.node.name === JEST_GLOBAL_NAME && !expression.scope.hasBinding(JEST_GLOBAL_NAME)) {\n    return true;\n  } // import { jest } from '@jest/globals'\n\n\n  if (expression.referencesImport(JEST_GLOBALS_MODULE_NAME, JEST_GLOBALS_MODULE_JEST_EXPORT_NAME)) {\n    return true;\n  } // import * as JestGlobals from '@jest/globals'\n\n\n  if (expression.isMemberExpression() && !expression.node.computed && expression.get('object').referencesImport(JEST_GLOBALS_MODULE_NAME, '*') && expression.node.property.type === 'Identifier' && expression.node.property.name === JEST_GLOBALS_MODULE_JEST_EXPORT_NAME) {\n    return true;\n  }\n\n  return false;\n};\n\nconst extractJestObjExprIfHoistable = expr => {\n  var _FUNCTIONS$propertyNa;\n\n  if (!expr.isCallExpression()) {\n    return null;\n  }\n\n  const callee = expr.get('callee');\n  const args = expr.get('arguments');\n\n  if (!callee.isMemberExpression() || callee.node.computed) {\n    return null;\n  }\n\n  const object = callee.get('object');\n  const property = callee.get('property');\n  const propertyName = property.node.name;\n  const jestObjExpr = isJestObject(object) ? object // The Jest object could be returned from another call since the functions are all chainable.\n  : extractJestObjExprIfHoistable(object);\n\n  if (!jestObjExpr) {\n    return null;\n  } // Important: Call the function check last\n  // It might throw an error to display to the user,\n  // which should only happen if we're already sure it's a call on the Jest object.\n\n\n  const functionLooksHoistable = (_FUNCTIONS$propertyNa = FUNCTIONS[propertyName]) === null || _FUNCTIONS$propertyNa === void 0 ? void 0 : _FUNCTIONS$propertyNa.call(FUNCTIONS, args);\n  return functionLooksHoistable ? jestObjExpr : null;\n};\n/* eslint-disable sort-keys */\n\n\nfunction jestHoist() {\n  return {\n    pre(_ref2) {\n      let {\n        path: program\n      } = _ref2;\n\n      this.declareJestObjGetterIdentifier = () => {\n        if (this.jestObjGetterIdentifier) {\n          return this.jestObjGetterIdentifier;\n        }\n\n        this.jestObjGetterIdentifier = program.scope.generateUidIdentifier('getJestObj');\n        program.unshiftContainer('body', [createJestObjectGetter({\n          GETTER_NAME: this.jestObjGetterIdentifier.name,\n          JEST_GLOBALS_MODULE_JEST_EXPORT_NAME,\n          JEST_GLOBALS_MODULE_NAME\n        })]);\n        return this.jestObjGetterIdentifier;\n      };\n    },\n\n    visitor: {\n      ExpressionStatement(exprStmt) {\n        const jestObjExpr = extractJestObjExprIfHoistable(exprStmt.get('expression'));\n\n        if (jestObjExpr) {\n          jestObjExpr.replaceWith((0, _types().callExpression)(this.declareJestObjGetterIdentifier(), []));\n        }\n      }\n\n    },\n\n    // in `post` to make sure we come after an import transform and can unshift above the `require`s\n    post(_ref3) {\n      let {\n        path: program\n      } = _ref3;\n      const self = this;\n      visitBlock(program);\n      program.traverse({\n        BlockStatement: visitBlock\n      });\n\n      function visitBlock(block) {\n        // use a temporary empty statement instead of the real first statement, which may itself be hoisted\n        const [varsHoistPoint, callsHoistPoint] = block.unshiftContainer('body', [(0, _types().emptyStatement)(), (0, _types().emptyStatement)()]);\n        block.traverse({\n          CallExpression: visitCallExpr,\n          VariableDeclarator: visitVariableDeclarator,\n          // do not traverse into nested blocks, or we'll hoist calls in there out to this block\n          blacklist: ['BlockStatement']\n        });\n        callsHoistPoint.remove();\n        varsHoistPoint.remove();\n\n        function visitCallExpr(callExpr) {\n          var _self$jestObjGetterId;\n\n          const {\n            node: {\n              callee\n            }\n          } = callExpr;\n\n          if ((0, _types().isIdentifier)(callee) && callee.name === ((_self$jestObjGetterId = self.jestObjGetterIdentifier) === null || _self$jestObjGetterId === void 0 ? void 0 : _self$jestObjGetterId.name)) {\n            const mockStmt = callExpr.getStatementParent();\n\n            if (mockStmt) {\n              const mockStmtParent = mockStmt.parentPath;\n\n              if (mockStmtParent.isBlock()) {\n                const mockStmtNode = mockStmt.node;\n                mockStmt.remove();\n                callsHoistPoint.insertBefore(mockStmtNode);\n              }\n            }\n          }\n        }\n\n        function visitVariableDeclarator(varDecl) {\n          if (hoistedVariables.has(varDecl.node)) {\n            // should be assert function, but it's not. So let's cast below\n            varDecl.parentPath.assertVariableDeclaration();\n            const {\n              kind,\n              declarations\n            } = varDecl.parent;\n\n            if (declarations.length === 1) {\n              varDecl.parentPath.remove();\n            } else {\n              varDecl.remove();\n            }\n\n            varsHoistPoint.insertBefore((0, _types().variableDeclaration)(kind, [varDecl.node]));\n          }\n        }\n      }\n    }\n\n  };\n}\n/* eslint-enable */","map":{"version":3,"names":["Object","defineProperty","exports","value","default","jestHoist","_template","data","require","_types","JEST_GLOBAL_NAME","JEST_GLOBALS_MODULE_NAME","JEST_GLOBALS_MODULE_JEST_EXPORT_NAME","hoistedVariables","WeakSet","ALLOWED_IDENTIFIERS","Set","getOwnPropertyNames","global","sort","IDVisitor","ReferencedIdentifier","path","ids","add","blacklist","FUNCTIONS","create","mock","args","length","isStringLiteral","isLiteral","moduleFactory","isFunction","buildCodeFrameError","TypeError","parentScope","parentPath","scope","traverse","id","name","node","found","bindings","parent","isAllowedIdentifier","hasGlobal","has","test","binding","isVariableDeclarator","initNode","init","constant","isPure","Array","from","join","ReferenceError","unmock","deepUnmock","disableAutomock","enableAutomock","createJestObjectGetter","statement","isJestObject","expression","isIdentifier","hasBinding","referencesImport","isMemberExpression","computed","get","property","type","extractJestObjExprIfHoistable","expr","_FUNCTIONS$propertyNa","isCallExpression","callee","object","propertyName","jestObjExpr","functionLooksHoistable","call","pre","program","declareJestObjGetterIdentifier","jestObjGetterIdentifier","generateUidIdentifier","unshiftContainer","GETTER_NAME","visitor","ExpressionStatement","exprStmt","replaceWith","callExpression","post","self","visitBlock","BlockStatement","block","varsHoistPoint","callsHoistPoint","emptyStatement","CallExpression","visitCallExpr","VariableDeclarator","visitVariableDeclarator","remove","callExpr","_self$jestObjGetterId","mockStmt","getStatementParent","mockStmtParent","isBlock","mockStmtNode","insertBefore","varDecl","assertVariableDeclaration","kind","declarations","variableDeclaration"],"sources":["/Users/lincolnkushwah/Desktop/All/React Projects/house_joy_new/node_modules/babel-plugin-jest-hoist/build/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = jestHoist;\n\nfunction _template() {\n  const data = require('@babel/template');\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _types() {\n  const data = require('@babel/types');\n\n  _types = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst JEST_GLOBAL_NAME = 'jest';\nconst JEST_GLOBALS_MODULE_NAME = '@jest/globals';\nconst JEST_GLOBALS_MODULE_JEST_EXPORT_NAME = 'jest';\nconst hoistedVariables = new WeakSet(); // We allow `jest`, `expect`, `require`, all default Node.js globals and all\n// ES2015 built-ins to be used inside of a `jest.mock` factory.\n// We also allow variables prefixed with `mock` as an escape-hatch.\n\nconst ALLOWED_IDENTIFIERS = new Set(\n  [\n    'Array',\n    'ArrayBuffer',\n    'Boolean',\n    'BigInt',\n    'DataView',\n    'Date',\n    'Error',\n    'EvalError',\n    'Float32Array',\n    'Float64Array',\n    'Function',\n    'Generator',\n    'GeneratorFunction',\n    'Infinity',\n    'Int16Array',\n    'Int32Array',\n    'Int8Array',\n    'InternalError',\n    'Intl',\n    'JSON',\n    'Map',\n    'Math',\n    'NaN',\n    'Number',\n    'Object',\n    'Promise',\n    'Proxy',\n    'RangeError',\n    'ReferenceError',\n    'Reflect',\n    'RegExp',\n    'Set',\n    'String',\n    'Symbol',\n    'SyntaxError',\n    'TypeError',\n    'URIError',\n    'Uint16Array',\n    'Uint32Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'WeakMap',\n    'WeakSet',\n    'arguments',\n    'console',\n    'expect',\n    'isNaN',\n    'jest',\n    'parseFloat',\n    'parseInt',\n    'exports',\n    'require',\n    'module',\n    '__filename',\n    '__dirname',\n    'undefined',\n    ...Object.getOwnPropertyNames(global)\n  ].sort()\n);\nconst IDVisitor = {\n  ReferencedIdentifier(path, {ids}) {\n    ids.add(path);\n  },\n\n  blacklist: ['TypeAnnotation', 'TSTypeAnnotation', 'TSTypeReference']\n};\nconst FUNCTIONS = Object.create(null);\n\nFUNCTIONS.mock = args => {\n  if (args.length === 1) {\n    return args[0].isStringLiteral() || args[0].isLiteral();\n  } else if (args.length === 2 || args.length === 3) {\n    const moduleFactory = args[1];\n\n    if (!moduleFactory.isFunction()) {\n      throw moduleFactory.buildCodeFrameError(\n        'The second argument of `jest.mock` must be an inline function.\\n',\n        TypeError\n      );\n    }\n\n    const ids = new Set();\n    const parentScope = moduleFactory.parentPath.scope; // @ts-expect-error: ReferencedIdentifier and blacklist are not known on visitors\n\n    moduleFactory.traverse(IDVisitor, {\n      ids\n    });\n\n    for (const id of ids) {\n      const {name} = id.node;\n      let found = false;\n      let scope = id.scope;\n\n      while (scope !== parentScope) {\n        if (scope.bindings[name]) {\n          found = true;\n          break;\n        }\n\n        scope = scope.parent;\n      }\n\n      if (!found) {\n        let isAllowedIdentifier =\n          (scope.hasGlobal(name) && ALLOWED_IDENTIFIERS.has(name)) ||\n          /^mock/i.test(name) || // Allow istanbul's coverage variable to pass.\n          /^(?:__)?cov/.test(name);\n\n        if (!isAllowedIdentifier) {\n          const binding = scope.bindings[name];\n\n          if (\n            binding !== null &&\n            binding !== void 0 &&\n            binding.path.isVariableDeclarator()\n          ) {\n            const {node} = binding.path;\n            const initNode = node.init;\n\n            if (initNode && binding.constant && scope.isPure(initNode, true)) {\n              hoistedVariables.add(node);\n              isAllowedIdentifier = true;\n            }\n          }\n        }\n\n        if (!isAllowedIdentifier) {\n          throw id.buildCodeFrameError(\n            'The module factory of `jest.mock()` is not allowed to ' +\n              'reference any out-of-scope variables.\\n' +\n              'Invalid variable access: ' +\n              name +\n              '\\n' +\n              'Allowed objects: ' +\n              Array.from(ALLOWED_IDENTIFIERS).join(', ') +\n              '.\\n' +\n              'Note: This is a precaution to guard against uninitialized mock ' +\n              'variables. If it is ensured that the mock is required lazily, ' +\n              'variable names prefixed with `mock` (case insensitive) are permitted.\\n',\n            ReferenceError\n          );\n        }\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nFUNCTIONS.unmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.deepUnmock = args => args.length === 1 && args[0].isStringLiteral();\n\nFUNCTIONS.disableAutomock = FUNCTIONS.enableAutomock = args =>\n  args.length === 0;\n\nconst createJestObjectGetter = (0, _template().statement)`\nfunction GETTER_NAME() {\n  const { JEST_GLOBALS_MODULE_JEST_EXPORT_NAME } = require(\"JEST_GLOBALS_MODULE_NAME\");\n  GETTER_NAME = () => JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n  return JEST_GLOBALS_MODULE_JEST_EXPORT_NAME;\n}\n`;\n\nconst isJestObject = expression => {\n  // global\n  if (\n    expression.isIdentifier() &&\n    expression.node.name === JEST_GLOBAL_NAME &&\n    !expression.scope.hasBinding(JEST_GLOBAL_NAME)\n  ) {\n    return true;\n  } // import { jest } from '@jest/globals'\n\n  if (\n    expression.referencesImport(\n      JEST_GLOBALS_MODULE_NAME,\n      JEST_GLOBALS_MODULE_JEST_EXPORT_NAME\n    )\n  ) {\n    return true;\n  } // import * as JestGlobals from '@jest/globals'\n\n  if (\n    expression.isMemberExpression() &&\n    !expression.node.computed &&\n    expression.get('object').referencesImport(JEST_GLOBALS_MODULE_NAME, '*') &&\n    expression.node.property.type === 'Identifier' &&\n    expression.node.property.name === JEST_GLOBALS_MODULE_JEST_EXPORT_NAME\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nconst extractJestObjExprIfHoistable = expr => {\n  var _FUNCTIONS$propertyNa;\n\n  if (!expr.isCallExpression()) {\n    return null;\n  }\n\n  const callee = expr.get('callee');\n  const args = expr.get('arguments');\n\n  if (!callee.isMemberExpression() || callee.node.computed) {\n    return null;\n  }\n\n  const object = callee.get('object');\n  const property = callee.get('property');\n  const propertyName = property.node.name;\n  const jestObjExpr = isJestObject(object)\n    ? object // The Jest object could be returned from another call since the functions are all chainable.\n    : extractJestObjExprIfHoistable(object);\n\n  if (!jestObjExpr) {\n    return null;\n  } // Important: Call the function check last\n  // It might throw an error to display to the user,\n  // which should only happen if we're already sure it's a call on the Jest object.\n\n  const functionLooksHoistable =\n    (_FUNCTIONS$propertyNa = FUNCTIONS[propertyName]) === null ||\n    _FUNCTIONS$propertyNa === void 0\n      ? void 0\n      : _FUNCTIONS$propertyNa.call(FUNCTIONS, args);\n  return functionLooksHoistable ? jestObjExpr : null;\n};\n/* eslint-disable sort-keys */\n\nfunction jestHoist() {\n  return {\n    pre({path: program}) {\n      this.declareJestObjGetterIdentifier = () => {\n        if (this.jestObjGetterIdentifier) {\n          return this.jestObjGetterIdentifier;\n        }\n\n        this.jestObjGetterIdentifier =\n          program.scope.generateUidIdentifier('getJestObj');\n        program.unshiftContainer('body', [\n          createJestObjectGetter({\n            GETTER_NAME: this.jestObjGetterIdentifier.name,\n            JEST_GLOBALS_MODULE_JEST_EXPORT_NAME,\n            JEST_GLOBALS_MODULE_NAME\n          })\n        ]);\n        return this.jestObjGetterIdentifier;\n      };\n    },\n\n    visitor: {\n      ExpressionStatement(exprStmt) {\n        const jestObjExpr = extractJestObjExprIfHoistable(\n          exprStmt.get('expression')\n        );\n\n        if (jestObjExpr) {\n          jestObjExpr.replaceWith(\n            (0, _types().callExpression)(\n              this.declareJestObjGetterIdentifier(),\n              []\n            )\n          );\n        }\n      }\n    },\n\n    // in `post` to make sure we come after an import transform and can unshift above the `require`s\n    post({path: program}) {\n      const self = this;\n      visitBlock(program);\n      program.traverse({\n        BlockStatement: visitBlock\n      });\n\n      function visitBlock(block) {\n        // use a temporary empty statement instead of the real first statement, which may itself be hoisted\n        const [varsHoistPoint, callsHoistPoint] = block.unshiftContainer(\n          'body',\n          [(0, _types().emptyStatement)(), (0, _types().emptyStatement)()]\n        );\n        block.traverse({\n          CallExpression: visitCallExpr,\n          VariableDeclarator: visitVariableDeclarator,\n          // do not traverse into nested blocks, or we'll hoist calls in there out to this block\n          blacklist: ['BlockStatement']\n        });\n        callsHoistPoint.remove();\n        varsHoistPoint.remove();\n\n        function visitCallExpr(callExpr) {\n          var _self$jestObjGetterId;\n\n          const {\n            node: {callee}\n          } = callExpr;\n\n          if (\n            (0, _types().isIdentifier)(callee) &&\n            callee.name ===\n              ((_self$jestObjGetterId = self.jestObjGetterIdentifier) ===\n                null || _self$jestObjGetterId === void 0\n                ? void 0\n                : _self$jestObjGetterId.name)\n          ) {\n            const mockStmt = callExpr.getStatementParent();\n\n            if (mockStmt) {\n              const mockStmtParent = mockStmt.parentPath;\n\n              if (mockStmtParent.isBlock()) {\n                const mockStmtNode = mockStmt.node;\n                mockStmt.remove();\n                callsHoistPoint.insertBefore(mockStmtNode);\n              }\n            }\n          }\n        }\n\n        function visitVariableDeclarator(varDecl) {\n          if (hoistedVariables.has(varDecl.node)) {\n            // should be assert function, but it's not. So let's cast below\n            varDecl.parentPath.assertVariableDeclaration();\n            const {kind, declarations} = varDecl.parent;\n\n            if (declarations.length === 1) {\n              varDecl.parentPath.remove();\n            } else {\n              varDecl.remove();\n            }\n\n            varsHoistPoint.insertBefore(\n              (0, _types().variableDeclaration)(kind, [varDecl.node])\n            );\n          }\n        }\n      }\n    }\n  };\n}\n/* eslint-enable */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}