{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getConsoleOutput;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction getConsoleOutput(buffer, config, globalConfig) {\n  const TITLE_INDENT = globalConfig.verbose ? '  ' : '    ';\n  const CONSOLE_INDENT = TITLE_INDENT + '  ';\n  const logEntries = buffer.reduce((output, _ref) => {\n    let {\n      type,\n      message,\n      origin\n    } = _ref;\n    message = message.split(/\\n/).map(line => CONSOLE_INDENT + line).join('\\n');\n    let typeMessage = 'console.' + type;\n    let noStackTrace = true;\n    let noCodeFrame = true;\n\n    if (type === 'warn') {\n      var _globalConfig$noStack;\n\n      message = _chalk().default.yellow(message);\n      typeMessage = _chalk().default.yellow(typeMessage);\n      noStackTrace = (_globalConfig$noStack = globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.noStackTrace) !== null && _globalConfig$noStack !== void 0 ? _globalConfig$noStack : false;\n      noCodeFrame = false;\n    } else if (type === 'error') {\n      var _globalConfig$noStack2;\n\n      message = _chalk().default.red(message);\n      typeMessage = _chalk().default.red(typeMessage);\n      noStackTrace = (_globalConfig$noStack2 = globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.noStackTrace) !== null && _globalConfig$noStack2 !== void 0 ? _globalConfig$noStack2 : false;\n      noCodeFrame = false;\n    }\n\n    const options = {\n      noCodeFrame,\n      noStackTrace\n    };\n    const formattedStackTrace = (0, _jestMessageUtil().formatStackTrace)(origin, config, options);\n    return output + TITLE_INDENT + _chalk().default.dim(typeMessage) + '\\n' + message.trimRight() + '\\n' + _chalk().default.dim(formattedStackTrace.trimRight()) + '\\n\\n';\n  }, '');\n  return logEntries.trimRight() + '\\n';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","getConsoleOutput","_chalk","data","_interopRequireDefault","require","_jestMessageUtil","obj","__esModule","buffer","config","globalConfig","TITLE_INDENT","verbose","CONSOLE_INDENT","logEntries","reduce","output","type","message","origin","split","map","line","join","typeMessage","noStackTrace","noCodeFrame","_globalConfig$noStack","yellow","_globalConfig$noStack2","red","options","formattedStackTrace","formatStackTrace","dim","trimRight"],"sources":["/Users/lincolnkushwah/Desktop/All/React Projects/house_joy_new/node_modules/@jest/console/build/getConsoleOutput.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getConsoleOutput;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction getConsoleOutput(buffer, config, globalConfig) {\n  const TITLE_INDENT = globalConfig.verbose ? '  ' : '    ';\n  const CONSOLE_INDENT = TITLE_INDENT + '  ';\n  const logEntries = buffer.reduce((output, {type, message, origin}) => {\n    message = message\n      .split(/\\n/)\n      .map(line => CONSOLE_INDENT + line)\n      .join('\\n');\n    let typeMessage = 'console.' + type;\n    let noStackTrace = true;\n    let noCodeFrame = true;\n\n    if (type === 'warn') {\n      var _globalConfig$noStack;\n\n      message = _chalk().default.yellow(message);\n      typeMessage = _chalk().default.yellow(typeMessage);\n      noStackTrace =\n        (_globalConfig$noStack =\n          globalConfig === null || globalConfig === void 0\n            ? void 0\n            : globalConfig.noStackTrace) !== null &&\n        _globalConfig$noStack !== void 0\n          ? _globalConfig$noStack\n          : false;\n      noCodeFrame = false;\n    } else if (type === 'error') {\n      var _globalConfig$noStack2;\n\n      message = _chalk().default.red(message);\n      typeMessage = _chalk().default.red(typeMessage);\n      noStackTrace =\n        (_globalConfig$noStack2 =\n          globalConfig === null || globalConfig === void 0\n            ? void 0\n            : globalConfig.noStackTrace) !== null &&\n        _globalConfig$noStack2 !== void 0\n          ? _globalConfig$noStack2\n          : false;\n      noCodeFrame = false;\n    }\n\n    const options = {\n      noCodeFrame,\n      noStackTrace\n    };\n    const formattedStackTrace = (0, _jestMessageUtil().formatStackTrace)(\n      origin,\n      config,\n      options\n    );\n    return (\n      output +\n      TITLE_INDENT +\n      _chalk().default.dim(typeMessage) +\n      '\\n' +\n      message.trimRight() +\n      '\\n' +\n      _chalk().default.dim(formattedStackTrace.trimRight()) +\n      '\\n\\n'\n    );\n  }, '');\n  return logEntries.trimRight() + '\\n';\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,gBAAlB;;AAEA,SAASC,MAAT,GAAkB;EAChB,MAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAnC;;EAEAH,MAAM,GAAG,YAAY;IACnB,OAAOC,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;;AAED,SAASG,gBAAT,GAA4B;EAC1B,MAAMH,IAAI,GAAGE,OAAO,CAAC,mBAAD,CAApB;;EAEAC,gBAAgB,GAAG,YAAY;IAC7B,OAAOH,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;;AAED,SAASC,sBAAT,CAAgCG,GAAhC,EAAqC;EACnC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAACP,OAAO,EAAEO;EAAV,CAArC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,gBAAT,CAA0BQ,MAA1B,EAAkCC,MAAlC,EAA0CC,YAA1C,EAAwD;EACtD,MAAMC,YAAY,GAAGD,YAAY,CAACE,OAAb,GAAuB,IAAvB,GAA8B,MAAnD;EACA,MAAMC,cAAc,GAAGF,YAAY,GAAG,IAAtC;EACA,MAAMG,UAAU,GAAGN,MAAM,CAACO,MAAP,CAAc,CAACC,MAAD,WAAqC;IAAA,IAA5B;MAACC,IAAD;MAAOC,OAAP;MAAgBC;IAAhB,CAA4B;IACpED,OAAO,GAAGA,OAAO,CACdE,KADO,CACD,IADC,EAEPC,GAFO,CAEHC,IAAI,IAAIT,cAAc,GAAGS,IAFtB,EAGPC,IAHO,CAGF,IAHE,CAAV;IAIA,IAAIC,WAAW,GAAG,aAAaP,IAA/B;IACA,IAAIQ,YAAY,GAAG,IAAnB;IACA,IAAIC,WAAW,GAAG,IAAlB;;IAEA,IAAIT,IAAI,KAAK,MAAb,EAAqB;MACnB,IAAIU,qBAAJ;;MAEAT,OAAO,GAAGjB,MAAM,GAAGF,OAAT,CAAiB6B,MAAjB,CAAwBV,OAAxB,CAAV;MACAM,WAAW,GAAGvB,MAAM,GAAGF,OAAT,CAAiB6B,MAAjB,CAAwBJ,WAAxB,CAAd;MACAC,YAAY,GACV,CAACE,qBAAqB,GACpBjB,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GACI,KAAK,CADT,GAEIA,YAAY,CAACe,YAHnB,MAGqC,IAHrC,IAIAE,qBAAqB,KAAK,KAAK,CAJ/B,GAKIA,qBALJ,GAMI,KAPN;MAQAD,WAAW,GAAG,KAAd;IACD,CAdD,MAcO,IAAIT,IAAI,KAAK,OAAb,EAAsB;MAC3B,IAAIY,sBAAJ;;MAEAX,OAAO,GAAGjB,MAAM,GAAGF,OAAT,CAAiB+B,GAAjB,CAAqBZ,OAArB,CAAV;MACAM,WAAW,GAAGvB,MAAM,GAAGF,OAAT,CAAiB+B,GAAjB,CAAqBN,WAArB,CAAd;MACAC,YAAY,GACV,CAACI,sBAAsB,GACrBnB,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GACI,KAAK,CADT,GAEIA,YAAY,CAACe,YAHnB,MAGqC,IAHrC,IAIAI,sBAAsB,KAAK,KAAK,CAJhC,GAKIA,sBALJ,GAMI,KAPN;MAQAH,WAAW,GAAG,KAAd;IACD;;IAED,MAAMK,OAAO,GAAG;MACdL,WADc;MAEdD;IAFc,CAAhB;IAIA,MAAMO,mBAAmB,GAAG,CAAC,GAAG3B,gBAAgB,GAAG4B,gBAAvB,EAC1Bd,MAD0B,EAE1BV,MAF0B,EAG1BsB,OAH0B,CAA5B;IAKA,OACEf,MAAM,GACNL,YADA,GAEAV,MAAM,GAAGF,OAAT,CAAiBmC,GAAjB,CAAqBV,WAArB,CAFA,GAGA,IAHA,GAIAN,OAAO,CAACiB,SAAR,EAJA,GAKA,IALA,GAMAlC,MAAM,GAAGF,OAAT,CAAiBmC,GAAjB,CAAqBF,mBAAmB,CAACG,SAApB,EAArB,CANA,GAOA,MARF;EAUD,CA1DkB,EA0DhB,EA1DgB,CAAnB;EA2DA,OAAOrB,UAAU,CAACqB,SAAX,KAAyB,IAAhC;AACD"},"metadata":{},"sourceType":"script"}