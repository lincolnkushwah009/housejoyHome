{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.constants = void 0;\nObject.defineProperty(exports, 'defaults', {\n  enumerable: true,\n  get: function () {\n    return _Defaults.default;\n  }\n});\nObject.defineProperty(exports, 'deprecationEntries', {\n  enumerable: true,\n  get: function () {\n    return _Deprecated.default;\n  }\n});\nObject.defineProperty(exports, 'descriptions', {\n  enumerable: true,\n  get: function () {\n    return _Descriptions.default;\n  }\n});\nObject.defineProperty(exports, 'getTestEnvironment', {\n  enumerable: true,\n  get: function () {\n    return _jestResolve().resolveTestEnvironment;\n  }\n});\nObject.defineProperty(exports, 'isJSONString', {\n  enumerable: true,\n  get: function () {\n    return _utils.isJSONString;\n  }\n});\nObject.defineProperty(exports, 'normalize', {\n  enumerable: true,\n  get: function () {\n    return _normalize.default;\n  }\n});\nexports.readConfig = readConfig;\nexports.readConfigs = readConfigs;\nObject.defineProperty(exports, 'replaceRootDirInPath', {\n  enumerable: true,\n  get: function () {\n    return _utils.replaceRootDirInPath;\n  }\n});\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar constants = _interopRequireWildcard(require('./constants'));\n\nexports.constants = constants;\n\nvar _normalize = _interopRequireDefault(require('./normalize'));\n\nvar _readConfigFileAndSetRootDir = _interopRequireDefault(require('./readConfigFileAndSetRootDir'));\n\nvar _resolveConfigPath = _interopRequireDefault(require('./resolveConfigPath'));\n\nvar _utils = require('./utils');\n\nfunction _jestResolve() {\n  const data = require('jest-resolve');\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Descriptions = _interopRequireDefault(require('./Descriptions'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// TODO: remove export in Jest 28\n\n\nasync function readConfig(argv, packageRootOrConfig, // Whether it needs to look into `--config` arg passed to CLI.\n// It only used to read initial config. If the initial config contains\n// `project` property, we don't want to read `--config` value and rather\n// read individual configs for every project.\nskipArgvConfigOption, parentConfigDirname) {\n  let projectIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;\n  let skipMultipleConfigWarning = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  let rawOptions;\n  let configPath = null;\n\n  if (typeof packageRootOrConfig !== 'string') {\n    if (parentConfigDirname) {\n      rawOptions = packageRootOrConfig;\n      rawOptions.rootDir = rawOptions.rootDir ? (0, _utils.replaceRootDirInPath)(parentConfigDirname, rawOptions.rootDir) : parentConfigDirname;\n    } else {\n      throw new Error('Jest: Cannot use configuration as an object without a file path.');\n    }\n  } else if ((0, _utils.isJSONString)(argv.config)) {\n    // A JSON string was passed to `--config` argument and we can parse it\n    // and use as is.\n    let config;\n\n    try {\n      config = JSON.parse(argv.config);\n    } catch {\n      throw new Error('There was an error while parsing the `--config` argument as a JSON string.');\n    } // NOTE: we might need to resolve this dir to an absolute path in the future\n\n\n    config.rootDir = config.rootDir || packageRootOrConfig;\n    rawOptions = config; // A string passed to `--config`, which is either a direct path to the config\n    // or a path to directory containing `package.json`, `jest.config.js` or `jest.config.ts`\n  } else if (!skipArgvConfigOption && typeof argv.config == 'string') {\n    configPath = (0, _resolveConfigPath.default)(argv.config, process.cwd(), skipMultipleConfigWarning);\n    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);\n  } else {\n    // Otherwise just try to find config in the current rootDir.\n    configPath = (0, _resolveConfigPath.default)(packageRootOrConfig, process.cwd(), skipMultipleConfigWarning);\n    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);\n  }\n\n  const {\n    options,\n    hasDeprecationWarnings\n  } = await (0, _normalize.default)(rawOptions, argv, configPath, projectIndex);\n  const {\n    globalConfig,\n    projectConfig\n  } = groupOptions(options);\n  return {\n    configPath,\n    globalConfig,\n    hasDeprecationWarnings,\n    projectConfig\n  };\n}\n\nconst groupOptions = options => ({\n  globalConfig: Object.freeze({\n    bail: options.bail,\n    changedFilesWithAncestor: options.changedFilesWithAncestor,\n    changedSince: options.changedSince,\n    collectCoverage: options.collectCoverage,\n    collectCoverageFrom: options.collectCoverageFrom,\n    collectCoverageOnlyFrom: options.collectCoverageOnlyFrom,\n    coverageDirectory: options.coverageDirectory,\n    coverageProvider: options.coverageProvider,\n    coverageReporters: options.coverageReporters,\n    coverageThreshold: options.coverageThreshold,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    errorOnDeprecated: options.errorOnDeprecated,\n    expand: options.expand,\n    filter: options.filter,\n    findRelatedTests: options.findRelatedTests,\n    forceExit: options.forceExit,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    json: options.json,\n    lastCommit: options.lastCommit,\n    listTests: options.listTests,\n    logHeapUsage: options.logHeapUsage,\n    maxConcurrency: options.maxConcurrency,\n    maxWorkers: options.maxWorkers,\n    noSCM: undefined,\n    noStackTrace: options.noStackTrace,\n    nonFlagArgs: options.nonFlagArgs,\n    notify: options.notify,\n    notifyMode: options.notifyMode,\n    onlyChanged: options.onlyChanged,\n    onlyFailures: options.onlyFailures,\n    outputFile: options.outputFile,\n    passWithNoTests: options.passWithNoTests,\n    projects: options.projects,\n    replname: options.replname,\n    reporters: options.reporters,\n    rootDir: options.rootDir,\n    runTestsByPath: options.runTestsByPath,\n    silent: options.silent,\n    skipFilter: options.skipFilter,\n    snapshotFormat: options.snapshotFormat,\n    testFailureExitCode: options.testFailureExitCode,\n    testNamePattern: options.testNamePattern,\n    testPathPattern: options.testPathPattern,\n    testResultsProcessor: options.testResultsProcessor,\n    testSequencer: options.testSequencer,\n    testTimeout: options.testTimeout,\n    updateSnapshot: options.updateSnapshot,\n    useStderr: options.useStderr,\n    verbose: options.verbose,\n    watch: options.watch,\n    watchAll: options.watchAll,\n    watchPlugins: options.watchPlugins,\n    watchman: options.watchman\n  }),\n  projectConfig: Object.freeze({\n    automock: options.automock,\n    cache: options.cache,\n    cacheDirectory: options.cacheDirectory,\n    clearMocks: options.clearMocks,\n    coveragePathIgnorePatterns: options.coveragePathIgnorePatterns,\n    cwd: options.cwd,\n    dependencyExtractor: options.dependencyExtractor,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    displayName: options.displayName,\n    errorOnDeprecated: options.errorOnDeprecated,\n    extensionsToTreatAsEsm: options.extensionsToTreatAsEsm,\n    extraGlobals: options.extraGlobals,\n    filter: options.filter,\n    forceCoverageMatch: options.forceCoverageMatch,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    globals: options.globals,\n    haste: options.haste,\n    injectGlobals: options.injectGlobals,\n    moduleDirectories: options.moduleDirectories,\n    moduleFileExtensions: options.moduleFileExtensions,\n    moduleLoader: options.moduleLoader,\n    moduleNameMapper: options.moduleNameMapper,\n    modulePathIgnorePatterns: options.modulePathIgnorePatterns,\n    modulePaths: options.modulePaths,\n    name: options.name,\n    prettierPath: options.prettierPath,\n    resetMocks: options.resetMocks,\n    resetModules: options.resetModules,\n    resolver: options.resolver,\n    restoreMocks: options.restoreMocks,\n    rootDir: options.rootDir,\n    roots: options.roots,\n    runner: options.runner,\n    setupFiles: options.setupFiles,\n    setupFilesAfterEnv: options.setupFilesAfterEnv,\n    skipFilter: options.skipFilter,\n    skipNodeResolution: options.skipNodeResolution,\n    slowTestThreshold: options.slowTestThreshold,\n    snapshotFormat: options.snapshotFormat,\n    snapshotResolver: options.snapshotResolver,\n    snapshotSerializers: options.snapshotSerializers,\n    testEnvironment: options.testEnvironment,\n    testEnvironmentOptions: options.testEnvironmentOptions,\n    testLocationInResults: options.testLocationInResults,\n    testMatch: options.testMatch,\n    testPathIgnorePatterns: options.testPathIgnorePatterns,\n    testRegex: options.testRegex,\n    testRunner: options.testRunner,\n    testURL: options.testURL,\n    timers: options.timers,\n    transform: options.transform,\n    transformIgnorePatterns: options.transformIgnorePatterns,\n    unmockedModulePathPatterns: options.unmockedModulePathPatterns,\n    watchPathIgnorePatterns: options.watchPathIgnorePatterns\n  })\n});\n\nconst ensureNoDuplicateConfigs = (parsedConfigs, projects) => {\n  if (projects.length <= 1) {\n    return;\n  }\n\n  const configPathMap = new Map();\n\n  for (const config of parsedConfigs) {\n    const {\n      configPath\n    } = config;\n\n    if (configPathMap.has(configPath)) {\n      const message = `Whoops! Two projects resolved to the same config path: ${_chalk().default.bold(String(configPath))}:\n\n  Project 1: ${_chalk().default.bold(projects[parsedConfigs.findIndex(x => x === config)])}\n  Project 2: ${_chalk().default.bold(projects[parsedConfigs.findIndex(x => x === configPathMap.get(configPath))])}\n\nThis usually means that your ${_chalk().default.bold('\"projects\"')} config includes a directory that doesn't have any configuration recognizable by Jest. Please fix it.\n`;\n      throw new Error(message);\n    }\n\n    if (configPath !== null) {\n      configPathMap.set(configPath, config);\n    }\n  }\n}; // Possible scenarios:\n//  1. jest --config config.json\n//  2. jest --projects p1 p2\n//  3. jest --projects p1 p2 --config config.json\n//  4. jest --projects p1\n//  5. jest\n//\n// If no projects are specified, process.cwd() will be used as the default\n// (and only) project.\n\n\nasync function readConfigs(argv, projectPaths) {\n  let globalConfig;\n  let hasDeprecationWarnings;\n  let configs = [];\n  let projects = projectPaths;\n  let configPath;\n\n  if (projectPaths.length === 1) {\n    const parsedConfig = await readConfig(argv, projects[0]);\n    configPath = parsedConfig.configPath;\n    hasDeprecationWarnings = parsedConfig.hasDeprecationWarnings;\n    globalConfig = parsedConfig.globalConfig;\n    configs = [parsedConfig.projectConfig];\n\n    if (globalConfig.projects && globalConfig.projects.length) {\n      // Even though we had one project in CLI args, there might be more\n      // projects defined in the config.\n      // In other words, if this was a single project,\n      // and its config has `projects` settings, use that value instead.\n      projects = globalConfig.projects;\n    }\n  }\n\n  if (projects.length > 0) {\n    const cwd = process.platform === 'win32' ? (0, _jestUtil().tryRealpath)(process.cwd()) : process.cwd();\n    const projectIsCwd = projects[0] === cwd;\n    const parsedConfigs = await Promise.all(projects.filter(root => {\n      // Ignore globbed files that cannot be `require`d.\n      if (typeof root === 'string' && fs().existsSync(root) && !fs().lstatSync(root).isDirectory() && !constants.JEST_CONFIG_EXT_ORDER.some(ext => root.endsWith(ext))) {\n        return false;\n      }\n\n      return true;\n    }).map((root, projectIndex) => {\n      const projectIsTheOnlyProject = projectIndex === 0 && projects.length === 1;\n      const skipArgvConfigOption = !(projectIsTheOnlyProject && projectIsCwd);\n      return readConfig(argv, root, skipArgvConfigOption, configPath ? path().dirname(configPath) : cwd, projectIndex, // we wanna skip the warning if this is the \"main\" project\n      projectIsCwd);\n    }));\n    ensureNoDuplicateConfigs(parsedConfigs, projects);\n    configs = parsedConfigs.map(_ref => {\n      let {\n        projectConfig\n      } = _ref;\n      return projectConfig;\n    });\n\n    if (!hasDeprecationWarnings) {\n      hasDeprecationWarnings = parsedConfigs.some(_ref2 => {\n        let {\n          hasDeprecationWarnings\n        } = _ref2;\n        return !!hasDeprecationWarnings;\n      });\n    } // If no config was passed initially, use the one from the first project\n\n\n    if (!globalConfig) {\n      globalConfig = parsedConfigs[0].globalConfig;\n    }\n  }\n\n  if (!globalConfig || !configs.length) {\n    throw new Error('jest: No configuration found for any project.');\n  }\n\n  return {\n    configs,\n    globalConfig,\n    hasDeprecationWarnings: !!hasDeprecationWarnings\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","constants","enumerable","get","_Defaults","default","_Deprecated","_Descriptions","_jestResolve","resolveTestEnvironment","_utils","isJSONString","_normalize","readConfig","readConfigs","replaceRootDirInPath","path","data","_interopRequireWildcard","require","_chalk","_interopRequireDefault","fs","_jestUtil","_readConfigFileAndSetRootDir","_resolveConfigPath","obj","__esModule","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","argv","packageRootOrConfig","skipArgvConfigOption","parentConfigDirname","projectIndex","Infinity","skipMultipleConfigWarning","rawOptions","configPath","rootDir","Error","config","JSON","parse","process","cwd","options","hasDeprecationWarnings","globalConfig","projectConfig","groupOptions","freeze","bail","changedFilesWithAncestor","changedSince","collectCoverage","collectCoverageFrom","collectCoverageOnlyFrom","coverageDirectory","coverageProvider","coverageReporters","coverageThreshold","detectLeaks","detectOpenHandles","errorOnDeprecated","expand","filter","findRelatedTests","forceExit","globalSetup","globalTeardown","json","lastCommit","listTests","logHeapUsage","maxConcurrency","maxWorkers","noSCM","undefined","noStackTrace","nonFlagArgs","notify","notifyMode","onlyChanged","onlyFailures","outputFile","passWithNoTests","projects","replname","reporters","runTestsByPath","silent","skipFilter","snapshotFormat","testFailureExitCode","testNamePattern","testPathPattern","testResultsProcessor","testSequencer","testTimeout","updateSnapshot","useStderr","verbose","watch","watchAll","watchPlugins","watchman","automock","cacheDirectory","clearMocks","coveragePathIgnorePatterns","dependencyExtractor","displayName","extensionsToTreatAsEsm","extraGlobals","forceCoverageMatch","globals","haste","injectGlobals","moduleDirectories","moduleFileExtensions","moduleLoader","moduleNameMapper","modulePathIgnorePatterns","modulePaths","name","prettierPath","resetMocks","resetModules","resolver","restoreMocks","roots","runner","setupFiles","setupFilesAfterEnv","skipNodeResolution","slowTestThreshold","snapshotResolver","snapshotSerializers","testEnvironment","testEnvironmentOptions","testLocationInResults","testMatch","testPathIgnorePatterns","testRegex","testRunner","testURL","timers","transform","transformIgnorePatterns","unmockedModulePathPatterns","watchPathIgnorePatterns","ensureNoDuplicateConfigs","parsedConfigs","length","configPathMap","Map","message","bold","String","findIndex","x","projectPaths","configs","parsedConfig","platform","tryRealpath","projectIsCwd","Promise","all","root","existsSync","lstatSync","isDirectory","JEST_CONFIG_EXT_ORDER","some","ext","endsWith","map","projectIsTheOnlyProject","dirname"],"sources":["/Users/lincolnkushwah/Desktop/All/React Projects/house_joy_new/node_modules/jest-config/build/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.constants = void 0;\nObject.defineProperty(exports, 'defaults', {\n  enumerable: true,\n  get: function () {\n    return _Defaults.default;\n  }\n});\nObject.defineProperty(exports, 'deprecationEntries', {\n  enumerable: true,\n  get: function () {\n    return _Deprecated.default;\n  }\n});\nObject.defineProperty(exports, 'descriptions', {\n  enumerable: true,\n  get: function () {\n    return _Descriptions.default;\n  }\n});\nObject.defineProperty(exports, 'getTestEnvironment', {\n  enumerable: true,\n  get: function () {\n    return _jestResolve().resolveTestEnvironment;\n  }\n});\nObject.defineProperty(exports, 'isJSONString', {\n  enumerable: true,\n  get: function () {\n    return _utils.isJSONString;\n  }\n});\nObject.defineProperty(exports, 'normalize', {\n  enumerable: true,\n  get: function () {\n    return _normalize.default;\n  }\n});\nexports.readConfig = readConfig;\nexports.readConfigs = readConfigs;\nObject.defineProperty(exports, 'replaceRootDirInPath', {\n  enumerable: true,\n  get: function () {\n    return _utils.replaceRootDirInPath;\n  }\n});\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n\n  fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar constants = _interopRequireWildcard(require('./constants'));\n\nexports.constants = constants;\n\nvar _normalize = _interopRequireDefault(require('./normalize'));\n\nvar _readConfigFileAndSetRootDir = _interopRequireDefault(\n  require('./readConfigFileAndSetRootDir')\n);\n\nvar _resolveConfigPath = _interopRequireDefault(require('./resolveConfigPath'));\n\nvar _utils = require('./utils');\n\nfunction _jestResolve() {\n  const data = require('jest-resolve');\n\n  _jestResolve = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _Deprecated = _interopRequireDefault(require('./Deprecated'));\n\nvar _Defaults = _interopRequireDefault(require('./Defaults'));\n\nvar _Descriptions = _interopRequireDefault(require('./Descriptions'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// TODO: remove export in Jest 28\nasync function readConfig(\n  argv,\n  packageRootOrConfig, // Whether it needs to look into `--config` arg passed to CLI.\n  // It only used to read initial config. If the initial config contains\n  // `project` property, we don't want to read `--config` value and rather\n  // read individual configs for every project.\n  skipArgvConfigOption,\n  parentConfigDirname,\n  projectIndex = Infinity,\n  skipMultipleConfigWarning = false\n) {\n  let rawOptions;\n  let configPath = null;\n\n  if (typeof packageRootOrConfig !== 'string') {\n    if (parentConfigDirname) {\n      rawOptions = packageRootOrConfig;\n      rawOptions.rootDir = rawOptions.rootDir\n        ? (0, _utils.replaceRootDirInPath)(\n            parentConfigDirname,\n            rawOptions.rootDir\n          )\n        : parentConfigDirname;\n    } else {\n      throw new Error(\n        'Jest: Cannot use configuration as an object without a file path.'\n      );\n    }\n  } else if ((0, _utils.isJSONString)(argv.config)) {\n    // A JSON string was passed to `--config` argument and we can parse it\n    // and use as is.\n    let config;\n\n    try {\n      config = JSON.parse(argv.config);\n    } catch {\n      throw new Error(\n        'There was an error while parsing the `--config` argument as a JSON string.'\n      );\n    } // NOTE: we might need to resolve this dir to an absolute path in the future\n\n    config.rootDir = config.rootDir || packageRootOrConfig;\n    rawOptions = config; // A string passed to `--config`, which is either a direct path to the config\n    // or a path to directory containing `package.json`, `jest.config.js` or `jest.config.ts`\n  } else if (!skipArgvConfigOption && typeof argv.config == 'string') {\n    configPath = (0, _resolveConfigPath.default)(\n      argv.config,\n      process.cwd(),\n      skipMultipleConfigWarning\n    );\n    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);\n  } else {\n    // Otherwise just try to find config in the current rootDir.\n    configPath = (0, _resolveConfigPath.default)(\n      packageRootOrConfig,\n      process.cwd(),\n      skipMultipleConfigWarning\n    );\n    rawOptions = await (0, _readConfigFileAndSetRootDir.default)(configPath);\n  }\n\n  const {options, hasDeprecationWarnings} = await (0, _normalize.default)(\n    rawOptions,\n    argv,\n    configPath,\n    projectIndex\n  );\n  const {globalConfig, projectConfig} = groupOptions(options);\n  return {\n    configPath,\n    globalConfig,\n    hasDeprecationWarnings,\n    projectConfig\n  };\n}\n\nconst groupOptions = options => ({\n  globalConfig: Object.freeze({\n    bail: options.bail,\n    changedFilesWithAncestor: options.changedFilesWithAncestor,\n    changedSince: options.changedSince,\n    collectCoverage: options.collectCoverage,\n    collectCoverageFrom: options.collectCoverageFrom,\n    collectCoverageOnlyFrom: options.collectCoverageOnlyFrom,\n    coverageDirectory: options.coverageDirectory,\n    coverageProvider: options.coverageProvider,\n    coverageReporters: options.coverageReporters,\n    coverageThreshold: options.coverageThreshold,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    errorOnDeprecated: options.errorOnDeprecated,\n    expand: options.expand,\n    filter: options.filter,\n    findRelatedTests: options.findRelatedTests,\n    forceExit: options.forceExit,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    json: options.json,\n    lastCommit: options.lastCommit,\n    listTests: options.listTests,\n    logHeapUsage: options.logHeapUsage,\n    maxConcurrency: options.maxConcurrency,\n    maxWorkers: options.maxWorkers,\n    noSCM: undefined,\n    noStackTrace: options.noStackTrace,\n    nonFlagArgs: options.nonFlagArgs,\n    notify: options.notify,\n    notifyMode: options.notifyMode,\n    onlyChanged: options.onlyChanged,\n    onlyFailures: options.onlyFailures,\n    outputFile: options.outputFile,\n    passWithNoTests: options.passWithNoTests,\n    projects: options.projects,\n    replname: options.replname,\n    reporters: options.reporters,\n    rootDir: options.rootDir,\n    runTestsByPath: options.runTestsByPath,\n    silent: options.silent,\n    skipFilter: options.skipFilter,\n    snapshotFormat: options.snapshotFormat,\n    testFailureExitCode: options.testFailureExitCode,\n    testNamePattern: options.testNamePattern,\n    testPathPattern: options.testPathPattern,\n    testResultsProcessor: options.testResultsProcessor,\n    testSequencer: options.testSequencer,\n    testTimeout: options.testTimeout,\n    updateSnapshot: options.updateSnapshot,\n    useStderr: options.useStderr,\n    verbose: options.verbose,\n    watch: options.watch,\n    watchAll: options.watchAll,\n    watchPlugins: options.watchPlugins,\n    watchman: options.watchman\n  }),\n  projectConfig: Object.freeze({\n    automock: options.automock,\n    cache: options.cache,\n    cacheDirectory: options.cacheDirectory,\n    clearMocks: options.clearMocks,\n    coveragePathIgnorePatterns: options.coveragePathIgnorePatterns,\n    cwd: options.cwd,\n    dependencyExtractor: options.dependencyExtractor,\n    detectLeaks: options.detectLeaks,\n    detectOpenHandles: options.detectOpenHandles,\n    displayName: options.displayName,\n    errorOnDeprecated: options.errorOnDeprecated,\n    extensionsToTreatAsEsm: options.extensionsToTreatAsEsm,\n    extraGlobals: options.extraGlobals,\n    filter: options.filter,\n    forceCoverageMatch: options.forceCoverageMatch,\n    globalSetup: options.globalSetup,\n    globalTeardown: options.globalTeardown,\n    globals: options.globals,\n    haste: options.haste,\n    injectGlobals: options.injectGlobals,\n    moduleDirectories: options.moduleDirectories,\n    moduleFileExtensions: options.moduleFileExtensions,\n    moduleLoader: options.moduleLoader,\n    moduleNameMapper: options.moduleNameMapper,\n    modulePathIgnorePatterns: options.modulePathIgnorePatterns,\n    modulePaths: options.modulePaths,\n    name: options.name,\n    prettierPath: options.prettierPath,\n    resetMocks: options.resetMocks,\n    resetModules: options.resetModules,\n    resolver: options.resolver,\n    restoreMocks: options.restoreMocks,\n    rootDir: options.rootDir,\n    roots: options.roots,\n    runner: options.runner,\n    setupFiles: options.setupFiles,\n    setupFilesAfterEnv: options.setupFilesAfterEnv,\n    skipFilter: options.skipFilter,\n    skipNodeResolution: options.skipNodeResolution,\n    slowTestThreshold: options.slowTestThreshold,\n    snapshotFormat: options.snapshotFormat,\n    snapshotResolver: options.snapshotResolver,\n    snapshotSerializers: options.snapshotSerializers,\n    testEnvironment: options.testEnvironment,\n    testEnvironmentOptions: options.testEnvironmentOptions,\n    testLocationInResults: options.testLocationInResults,\n    testMatch: options.testMatch,\n    testPathIgnorePatterns: options.testPathIgnorePatterns,\n    testRegex: options.testRegex,\n    testRunner: options.testRunner,\n    testURL: options.testURL,\n    timers: options.timers,\n    transform: options.transform,\n    transformIgnorePatterns: options.transformIgnorePatterns,\n    unmockedModulePathPatterns: options.unmockedModulePathPatterns,\n    watchPathIgnorePatterns: options.watchPathIgnorePatterns\n  })\n});\n\nconst ensureNoDuplicateConfigs = (parsedConfigs, projects) => {\n  if (projects.length <= 1) {\n    return;\n  }\n\n  const configPathMap = new Map();\n\n  for (const config of parsedConfigs) {\n    const {configPath} = config;\n\n    if (configPathMap.has(configPath)) {\n      const message = `Whoops! Two projects resolved to the same config path: ${_chalk().default.bold(\n        String(configPath)\n      )}:\n\n  Project 1: ${_chalk().default.bold(\n    projects[parsedConfigs.findIndex(x => x === config)]\n  )}\n  Project 2: ${_chalk().default.bold(\n    projects[parsedConfigs.findIndex(x => x === configPathMap.get(configPath))]\n  )}\n\nThis usually means that your ${_chalk().default.bold(\n        '\"projects\"'\n      )} config includes a directory that doesn't have any configuration recognizable by Jest. Please fix it.\n`;\n      throw new Error(message);\n    }\n\n    if (configPath !== null) {\n      configPathMap.set(configPath, config);\n    }\n  }\n}; // Possible scenarios:\n//  1. jest --config config.json\n//  2. jest --projects p1 p2\n//  3. jest --projects p1 p2 --config config.json\n//  4. jest --projects p1\n//  5. jest\n//\n// If no projects are specified, process.cwd() will be used as the default\n// (and only) project.\n\nasync function readConfigs(argv, projectPaths) {\n  let globalConfig;\n  let hasDeprecationWarnings;\n  let configs = [];\n  let projects = projectPaths;\n  let configPath;\n\n  if (projectPaths.length === 1) {\n    const parsedConfig = await readConfig(argv, projects[0]);\n    configPath = parsedConfig.configPath;\n    hasDeprecationWarnings = parsedConfig.hasDeprecationWarnings;\n    globalConfig = parsedConfig.globalConfig;\n    configs = [parsedConfig.projectConfig];\n\n    if (globalConfig.projects && globalConfig.projects.length) {\n      // Even though we had one project in CLI args, there might be more\n      // projects defined in the config.\n      // In other words, if this was a single project,\n      // and its config has `projects` settings, use that value instead.\n      projects = globalConfig.projects;\n    }\n  }\n\n  if (projects.length > 0) {\n    const cwd =\n      process.platform === 'win32'\n        ? (0, _jestUtil().tryRealpath)(process.cwd())\n        : process.cwd();\n    const projectIsCwd = projects[0] === cwd;\n    const parsedConfigs = await Promise.all(\n      projects\n        .filter(root => {\n          // Ignore globbed files that cannot be `require`d.\n          if (\n            typeof root === 'string' &&\n            fs().existsSync(root) &&\n            !fs().lstatSync(root).isDirectory() &&\n            !constants.JEST_CONFIG_EXT_ORDER.some(ext => root.endsWith(ext))\n          ) {\n            return false;\n          }\n\n          return true;\n        })\n        .map((root, projectIndex) => {\n          const projectIsTheOnlyProject =\n            projectIndex === 0 && projects.length === 1;\n          const skipArgvConfigOption = !(\n            projectIsTheOnlyProject && projectIsCwd\n          );\n          return readConfig(\n            argv,\n            root,\n            skipArgvConfigOption,\n            configPath ? path().dirname(configPath) : cwd,\n            projectIndex, // we wanna skip the warning if this is the \"main\" project\n            projectIsCwd\n          );\n        })\n    );\n    ensureNoDuplicateConfigs(parsedConfigs, projects);\n    configs = parsedConfigs.map(({projectConfig}) => projectConfig);\n\n    if (!hasDeprecationWarnings) {\n      hasDeprecationWarnings = parsedConfigs.some(\n        ({hasDeprecationWarnings}) => !!hasDeprecationWarnings\n      );\n    } // If no config was passed initially, use the one from the first project\n\n    if (!globalConfig) {\n      globalConfig = parsedConfigs[0].globalConfig;\n    }\n  }\n\n  if (!globalConfig || !configs.length) {\n    throw new Error('jest: No configuration found for any project.');\n  }\n\n  return {\n    configs,\n    globalConfig,\n    hasDeprecationWarnings: !!hasDeprecationWarnings\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}