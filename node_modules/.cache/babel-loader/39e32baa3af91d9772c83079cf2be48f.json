{"ast":null,"code":"\"use strict\";\n\nfunction dedent(strings) {\n  var raw = void 0;\n\n  if (typeof strings === \"string\") {\n    // dedent can be used as a plain function\n    raw = [strings];\n  } else {\n    raw = strings.raw;\n  } // first, perform interpolation\n\n\n  var result = \"\";\n\n  for (var i = 0; i < raw.length; i++) {\n    result += raw[i]. // join lines when there is a suppressed newline\n    replace(/\\\\\\n[ \\t]*/g, \"\"). // handle escaped backticks\n    replace(/\\\\`/g, \"`\");\n\n    if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {\n      result += arguments.length <= i + 1 ? undefined : arguments[i + 1];\n    }\n  } // now strip indentation\n\n\n  var lines = result.split(\"\\n\");\n  var mindent = null;\n  lines.forEach(function (l) {\n    var m = l.match(/^(\\s+)\\S+/);\n\n    if (m) {\n      var indent = m[1].length;\n\n      if (!mindent) {\n        // this is the first indented line\n        mindent = indent;\n      } else {\n        mindent = Math.min(mindent, indent);\n      }\n    }\n  });\n\n  if (mindent !== null) {\n    result = lines.map(function (l) {\n      return l[0] === \" \" ? l.slice(mindent) : l;\n    }).join(\"\\n\");\n  } // dedent eats leading and trailing whitespace too\n\n\n  result = result.trim(); // handle escaped newlines at the end to ensure they don't get stripped too\n\n  return result.replace(/\\\\n/g, \"\\n\");\n}\n\nif (typeof module !== \"undefined\") {\n  module.exports = dedent;\n}","map":{"version":3,"names":["dedent","strings","raw","result","i","length","replace","arguments","undefined","lines","split","mindent","forEach","l","m","match","indent","Math","min","map","slice","join","trim","module","exports"],"sources":["/Users/lincolnkushwah/Desktop/All/React Projects/house_joy_new/node_modules/dedent/dist/dedent.js"],"sourcesContent":["\"use strict\";\n\nfunction dedent(strings) {\n\n  var raw = void 0;\n  if (typeof strings === \"string\") {\n    // dedent can be used as a plain function\n    raw = [strings];\n  } else {\n    raw = strings.raw;\n  }\n\n  // first, perform interpolation\n  var result = \"\";\n  for (var i = 0; i < raw.length; i++) {\n    result += raw[i].\n    // join lines when there is a suppressed newline\n    replace(/\\\\\\n[ \\t]*/g, \"\").\n\n    // handle escaped backticks\n    replace(/\\\\`/g, \"`\");\n\n    if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {\n      result += arguments.length <= i + 1 ? undefined : arguments[i + 1];\n    }\n  }\n\n  // now strip indentation\n  var lines = result.split(\"\\n\");\n  var mindent = null;\n  lines.forEach(function (l) {\n    var m = l.match(/^(\\s+)\\S+/);\n    if (m) {\n      var indent = m[1].length;\n      if (!mindent) {\n        // this is the first indented line\n        mindent = indent;\n      } else {\n        mindent = Math.min(mindent, indent);\n      }\n    }\n  });\n\n  if (mindent !== null) {\n    result = lines.map(function (l) {\n      return l[0] === \" \" ? l.slice(mindent) : l;\n    }).join(\"\\n\");\n  }\n\n  // dedent eats leading and trailing whitespace too\n  result = result.trim();\n\n  // handle escaped newlines at the end to ensure they don't get stripped too\n  return result.replace(/\\\\n/g, \"\\n\");\n}\n\nif (typeof module !== \"undefined\") {\n  module.exports = dedent;\n}\n"],"mappings":"AAAA;;AAEA,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;EAEvB,IAAIC,GAAG,GAAG,KAAK,CAAf;;EACA,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;IAC/B;IACAC,GAAG,GAAG,CAACD,OAAD,CAAN;EACD,CAHD,MAGO;IACLC,GAAG,GAAGD,OAAO,CAACC,GAAd;EACD,CARsB,CAUvB;;;EACA,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;IACnCD,MAAM,IAAID,GAAG,CAACE,CAAD,CAAH,EACV;IACAE,OAFU,CAEF,aAFE,EAEa,EAFb,GAIV;IACAA,OALU,CAKF,MALE,EAKM,GALN,CAAV;;IAOA,IAAIF,CAAC,IAAIG,SAAS,CAACF,MAAV,IAAoB,CAApB,GAAwB,CAAxB,GAA4BE,SAAS,CAACF,MAAV,GAAmB,CAAnD,CAAL,EAA4D;MAC1DF,MAAM,IAAII,SAAS,CAACF,MAAV,IAAoBD,CAAC,GAAG,CAAxB,GAA4BI,SAA5B,GAAwCD,SAAS,CAACH,CAAC,GAAG,CAAL,CAA3D;IACD;EACF,CAvBsB,CAyBvB;;;EACA,IAAIK,KAAK,GAAGN,MAAM,CAACO,KAAP,CAAa,IAAb,CAAZ;EACA,IAAIC,OAAO,GAAG,IAAd;EACAF,KAAK,CAACG,OAAN,CAAc,UAAUC,CAAV,EAAa;IACzB,IAAIC,CAAC,GAAGD,CAAC,CAACE,KAAF,CAAQ,WAAR,CAAR;;IACA,IAAID,CAAJ,EAAO;MACL,IAAIE,MAAM,GAAGF,CAAC,CAAC,CAAD,CAAD,CAAKT,MAAlB;;MACA,IAAI,CAACM,OAAL,EAAc;QACZ;QACAA,OAAO,GAAGK,MAAV;MACD,CAHD,MAGO;QACLL,OAAO,GAAGM,IAAI,CAACC,GAAL,CAASP,OAAT,EAAkBK,MAAlB,CAAV;MACD;IACF;EACF,CAXD;;EAaA,IAAIL,OAAO,KAAK,IAAhB,EAAsB;IACpBR,MAAM,GAAGM,KAAK,CAACU,GAAN,CAAU,UAAUN,CAAV,EAAa;MAC9B,OAAOA,CAAC,CAAC,CAAD,CAAD,KAAS,GAAT,GAAeA,CAAC,CAACO,KAAF,CAAQT,OAAR,CAAf,GAAkCE,CAAzC;IACD,CAFQ,EAENQ,IAFM,CAED,IAFC,CAAT;EAGD,CA7CsB,CA+CvB;;;EACAlB,MAAM,GAAGA,MAAM,CAACmB,IAAP,EAAT,CAhDuB,CAkDvB;;EACA,OAAOnB,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,IAAvB,CAAP;AACD;;AAED,IAAI,OAAOiB,MAAP,KAAkB,WAAtB,EAAmC;EACjCA,MAAM,CAACC,OAAP,GAAiBxB,MAAjB;AACD"},"metadata":{},"sourceType":"script"}