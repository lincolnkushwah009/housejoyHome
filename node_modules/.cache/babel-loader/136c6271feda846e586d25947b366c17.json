{"ast":null,"code":"// vendored from https://github.com/amasad/sane/blob/64ff3a870c42e84f744086884bf55a4f9c22d376/src/node_watcher.js\n'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst fs = require('fs');\n\nconst platform = require('os').platform();\n\nconst path = require('path');\n\nconst common = require('./common');\n/**\n * Constants\n */\n\n\nconst DEFAULT_DELAY = common.DEFAULT_DELAY;\nconst CHANGE_EVENT = common.CHANGE_EVENT;\nconst DELETE_EVENT = common.DELETE_EVENT;\nconst ADD_EVENT = common.ADD_EVENT;\nconst ALL_EVENT = common.ALL_EVENT;\n/**\n * Export `NodeWatcher` class.\n * Watches `dir`.\n *\n * @class NodeWatcher\n * @param {String} dir\n * @param {Object} opts\n * @public\n */\n\nmodule.exports = class NodeWatcher extends EventEmitter {\n  constructor(dir, opts) {\n    super();\n    common.assignOptions(this, opts);\n    this.watched = Object.create(null);\n    this.changeTimers = Object.create(null);\n    this.dirRegistery = Object.create(null);\n    this.root = path.resolve(dir);\n    this.watchdir = this.watchdir.bind(this);\n    this.register = this.register.bind(this);\n    this.checkedEmitError = this.checkedEmitError.bind(this);\n    this.watchdir(this.root);\n    common.recReaddir(this.root, this.watchdir, this.register, this.emit.bind(this, 'ready'), this.checkedEmitError, this.ignored);\n  }\n  /**\n   * Register files that matches our globs to know what to type of event to\n   * emit in the future.\n   *\n   * Registery looks like the following:\n   *\n   *  dirRegister => Map {\n   *    dirpath => Map {\n   *       filename => true\n   *    }\n   *  }\n   *\n   * @param {string} filepath\n   * @return {boolean} whether or not we have registered the file.\n   * @private\n   */\n\n\n  register(filepath) {\n    const relativePath = path.relative(this.root, filepath);\n\n    if (!common.isFileIncluded(this.globs, this.dot, this.doIgnore, relativePath)) {\n      return false;\n    }\n\n    const dir = path.dirname(filepath);\n\n    if (!this.dirRegistery[dir]) {\n      this.dirRegistery[dir] = Object.create(null);\n    }\n\n    const filename = path.basename(filepath);\n    this.dirRegistery[dir][filename] = true;\n    return true;\n  }\n  /**\n   * Removes a file from the registery.\n   *\n   * @param {string} filepath\n   * @private\n   */\n\n\n  unregister(filepath) {\n    const dir = path.dirname(filepath);\n\n    if (this.dirRegistery[dir]) {\n      const filename = path.basename(filepath);\n      delete this.dirRegistery[dir][filename];\n    }\n  }\n  /**\n   * Removes a dir from the registery.\n   *\n   * @param {string} dirpath\n   * @private\n   */\n\n\n  unregisterDir(dirpath) {\n    if (this.dirRegistery[dirpath]) {\n      delete this.dirRegistery[dirpath];\n    }\n  }\n  /**\n   * Checks if a file or directory exists in the registery.\n   *\n   * @param {string} fullpath\n   * @return {boolean}\n   * @private\n   */\n\n\n  registered(fullpath) {\n    const dir = path.dirname(fullpath);\n    return this.dirRegistery[fullpath] || this.dirRegistery[dir] && this.dirRegistery[dir][path.basename(fullpath)];\n  }\n  /**\n   * Emit \"error\" event if it's not an ignorable event\n   *\n   * @param error\n   * @private\n   */\n\n\n  checkedEmitError(error) {\n    if (!isIgnorableFileError(error)) {\n      this.emit('error', error);\n    }\n  }\n  /**\n   * Watch a directory.\n   *\n   * @param {string} dir\n   * @private\n   */\n\n\n  watchdir(dir) {\n    if (this.watched[dir]) {\n      return;\n    }\n\n    const watcher = fs.watch(dir, {\n      persistent: true\n    }, this.normalizeChange.bind(this, dir));\n    this.watched[dir] = watcher;\n    watcher.on('error', this.checkedEmitError);\n\n    if (this.root !== dir) {\n      this.register(dir);\n    }\n  }\n  /**\n   * Stop watching a directory.\n   *\n   * @param {string} dir\n   * @private\n   */\n\n\n  stopWatching(dir) {\n    if (this.watched[dir]) {\n      this.watched[dir].close();\n      delete this.watched[dir];\n    }\n  }\n  /**\n   * End watching.\n   *\n   * @public\n   */\n\n\n  close() {\n    Object.keys(this.watched).forEach(this.stopWatching, this);\n    this.removeAllListeners();\n    return Promise.resolve();\n  }\n  /**\n   * On some platforms, as pointed out on the fs docs (most likely just win32)\n   * the file argument might be missing from the fs event. Try to detect what\n   * change by detecting if something was deleted or the most recent file change.\n   *\n   * @param {string} dir\n   * @param {string} event\n   * @param {string} file\n   * @public\n   */\n\n\n  detectChangedFile(dir, event, callback) {\n    if (!this.dirRegistery[dir]) {\n      return;\n    }\n\n    let found = false;\n    let closest = {\n      mtime: 0\n    };\n    let c = 0;\n    Object.keys(this.dirRegistery[dir]).forEach(function (file, i, arr) {\n      fs.lstat(path.join(dir, file), (error, stat) => {\n        if (found) {\n          return;\n        }\n\n        if (error) {\n          if (isIgnorableFileError(error)) {\n            found = true;\n            callback(file);\n          } else {\n            this.emit('error', error);\n          }\n        } else {\n          if (stat.mtime > closest.mtime) {\n            stat.file = file;\n            closest = stat;\n          }\n\n          if (arr.length === ++c) {\n            callback(closest.file);\n          }\n        }\n      });\n    }, this);\n  }\n  /**\n   * Normalize fs events and pass it on to be processed.\n   *\n   * @param {string} dir\n   * @param {string} event\n   * @param {string} file\n   * @public\n   */\n\n\n  normalizeChange(dir, event, file) {\n    if (!file) {\n      this.detectChangedFile(dir, event, actualFile => {\n        if (actualFile) {\n          this.processChange(dir, event, actualFile);\n        }\n      });\n    } else {\n      this.processChange(dir, event, path.normalize(file));\n    }\n  }\n  /**\n   * Process changes.\n   *\n   * @param {string} dir\n   * @param {string} event\n   * @param {string} file\n   * @public\n   */\n\n\n  processChange(dir, event, file) {\n    const fullPath = path.join(dir, file);\n    const relativePath = path.join(path.relative(this.root, dir), file);\n    fs.lstat(fullPath, (error, stat) => {\n      if (error && error.code !== 'ENOENT') {\n        this.emit('error', error);\n      } else if (!error && stat.isDirectory()) {\n        // win32 emits usless change events on dirs.\n        if (event !== 'change') {\n          this.watchdir(fullPath);\n\n          if (common.isFileIncluded(this.globs, this.dot, this.doIgnore, relativePath)) {\n            this.emitEvent(ADD_EVENT, relativePath, stat);\n          }\n        }\n      } else {\n        const registered = this.registered(fullPath);\n\n        if (error && error.code === 'ENOENT') {\n          this.unregister(fullPath);\n          this.stopWatching(fullPath);\n          this.unregisterDir(fullPath);\n\n          if (registered) {\n            this.emitEvent(DELETE_EVENT, relativePath);\n          }\n        } else if (registered) {\n          this.emitEvent(CHANGE_EVENT, relativePath, stat);\n        } else {\n          if (this.register(fullPath)) {\n            this.emitEvent(ADD_EVENT, relativePath, stat);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Triggers a 'change' event after debounding it to take care of duplicate\n   * events on os x.\n   *\n   * @private\n   */\n\n\n  emitEvent(type, file, stat) {\n    const key = type + '-' + file;\n    const addKey = ADD_EVENT + '-' + file;\n\n    if (type === CHANGE_EVENT && this.changeTimers[addKey]) {\n      // Ignore the change event that is immediately fired after an add event.\n      // (This happens on Linux).\n      return;\n    }\n\n    clearTimeout(this.changeTimers[key]);\n    this.changeTimers[key] = setTimeout(() => {\n      delete this.changeTimers[key];\n\n      if (type === ADD_EVENT && stat.isDirectory()) {\n        // Recursively emit add events and watch for sub-files/folders\n        common.recReaddir(path.resolve(this.root, file), function emitAddDir(dir, stats) {\n          this.watchdir(dir);\n          this.rawEmitEvent(ADD_EVENT, path.relative(this.root, dir), stats);\n        }.bind(this), function emitAddFile(file, stats) {\n          this.register(file);\n          this.rawEmitEvent(ADD_EVENT, path.relative(this.root, file), stats);\n        }.bind(this), function endCallback() {}, this.checkedEmitError, this.ignored);\n      } else {\n        this.rawEmitEvent(type, file, stat);\n      }\n    }, DEFAULT_DELAY);\n  }\n  /**\n   * Actually emit the events\n   */\n\n\n  rawEmitEvent(type, file, stat) {\n    this.emit(type, file, this.root, stat);\n    this.emit(ALL_EVENT, type, file, this.root, stat);\n  }\n\n};\n/**\n * Determine if a given FS error can be ignored\n *\n * @private\n */\n\nfunction isIgnorableFileError(error) {\n  return error.code === 'ENOENT' || // Workaround Windows node issue #4337.\n  error.code === 'EPERM' && platform === 'win32';\n}","map":{"version":3,"names":["EventEmitter","require","fs","platform","path","common","DEFAULT_DELAY","CHANGE_EVENT","DELETE_EVENT","ADD_EVENT","ALL_EVENT","module","exports","NodeWatcher","constructor","dir","opts","assignOptions","watched","Object","create","changeTimers","dirRegistery","root","resolve","watchdir","bind","register","checkedEmitError","recReaddir","emit","ignored","filepath","relativePath","relative","isFileIncluded","globs","dot","doIgnore","dirname","filename","basename","unregister","unregisterDir","dirpath","registered","fullpath","error","isIgnorableFileError","watcher","watch","persistent","normalizeChange","on","stopWatching","close","keys","forEach","removeAllListeners","Promise","detectChangedFile","event","callback","found","closest","mtime","c","file","i","arr","lstat","join","stat","length","actualFile","processChange","normalize","fullPath","code","isDirectory","emitEvent","type","key","addKey","clearTimeout","setTimeout","emitAddDir","stats","rawEmitEvent","emitAddFile","endCallback"],"sources":["/Users/lincolnkushwah/Desktop/All/React Projects/house_joy_new/node_modules/jest-haste-map/build/watchers/NodeWatcher.js"],"sourcesContent":["// vendored from https://github.com/amasad/sane/blob/64ff3a870c42e84f744086884bf55a4f9c22d376/src/node_watcher.js\n'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst fs = require('fs');\n\nconst platform = require('os').platform();\n\nconst path = require('path');\n\nconst common = require('./common');\n/**\n * Constants\n */\n\nconst DEFAULT_DELAY = common.DEFAULT_DELAY;\nconst CHANGE_EVENT = common.CHANGE_EVENT;\nconst DELETE_EVENT = common.DELETE_EVENT;\nconst ADD_EVENT = common.ADD_EVENT;\nconst ALL_EVENT = common.ALL_EVENT;\n/**\n * Export `NodeWatcher` class.\n * Watches `dir`.\n *\n * @class NodeWatcher\n * @param {String} dir\n * @param {Object} opts\n * @public\n */\n\nmodule.exports = class NodeWatcher extends EventEmitter {\n  constructor(dir, opts) {\n    super();\n    common.assignOptions(this, opts);\n    this.watched = Object.create(null);\n    this.changeTimers = Object.create(null);\n    this.dirRegistery = Object.create(null);\n    this.root = path.resolve(dir);\n    this.watchdir = this.watchdir.bind(this);\n    this.register = this.register.bind(this);\n    this.checkedEmitError = this.checkedEmitError.bind(this);\n    this.watchdir(this.root);\n    common.recReaddir(\n      this.root,\n      this.watchdir,\n      this.register,\n      this.emit.bind(this, 'ready'),\n      this.checkedEmitError,\n      this.ignored\n    );\n  }\n  /**\n   * Register files that matches our globs to know what to type of event to\n   * emit in the future.\n   *\n   * Registery looks like the following:\n   *\n   *  dirRegister => Map {\n   *    dirpath => Map {\n   *       filename => true\n   *    }\n   *  }\n   *\n   * @param {string} filepath\n   * @return {boolean} whether or not we have registered the file.\n   * @private\n   */\n\n  register(filepath) {\n    const relativePath = path.relative(this.root, filepath);\n\n    if (\n      !common.isFileIncluded(this.globs, this.dot, this.doIgnore, relativePath)\n    ) {\n      return false;\n    }\n\n    const dir = path.dirname(filepath);\n\n    if (!this.dirRegistery[dir]) {\n      this.dirRegistery[dir] = Object.create(null);\n    }\n\n    const filename = path.basename(filepath);\n    this.dirRegistery[dir][filename] = true;\n    return true;\n  }\n  /**\n   * Removes a file from the registery.\n   *\n   * @param {string} filepath\n   * @private\n   */\n\n  unregister(filepath) {\n    const dir = path.dirname(filepath);\n\n    if (this.dirRegistery[dir]) {\n      const filename = path.basename(filepath);\n      delete this.dirRegistery[dir][filename];\n    }\n  }\n  /**\n   * Removes a dir from the registery.\n   *\n   * @param {string} dirpath\n   * @private\n   */\n\n  unregisterDir(dirpath) {\n    if (this.dirRegistery[dirpath]) {\n      delete this.dirRegistery[dirpath];\n    }\n  }\n  /**\n   * Checks if a file or directory exists in the registery.\n   *\n   * @param {string} fullpath\n   * @return {boolean}\n   * @private\n   */\n\n  registered(fullpath) {\n    const dir = path.dirname(fullpath);\n    return (\n      this.dirRegistery[fullpath] ||\n      (this.dirRegistery[dir] &&\n        this.dirRegistery[dir][path.basename(fullpath)])\n    );\n  }\n  /**\n   * Emit \"error\" event if it's not an ignorable event\n   *\n   * @param error\n   * @private\n   */\n\n  checkedEmitError(error) {\n    if (!isIgnorableFileError(error)) {\n      this.emit('error', error);\n    }\n  }\n  /**\n   * Watch a directory.\n   *\n   * @param {string} dir\n   * @private\n   */\n\n  watchdir(dir) {\n    if (this.watched[dir]) {\n      return;\n    }\n\n    const watcher = fs.watch(\n      dir,\n      {\n        persistent: true\n      },\n      this.normalizeChange.bind(this, dir)\n    );\n    this.watched[dir] = watcher;\n    watcher.on('error', this.checkedEmitError);\n\n    if (this.root !== dir) {\n      this.register(dir);\n    }\n  }\n  /**\n   * Stop watching a directory.\n   *\n   * @param {string} dir\n   * @private\n   */\n\n  stopWatching(dir) {\n    if (this.watched[dir]) {\n      this.watched[dir].close();\n      delete this.watched[dir];\n    }\n  }\n  /**\n   * End watching.\n   *\n   * @public\n   */\n\n  close() {\n    Object.keys(this.watched).forEach(this.stopWatching, this);\n    this.removeAllListeners();\n    return Promise.resolve();\n  }\n  /**\n   * On some platforms, as pointed out on the fs docs (most likely just win32)\n   * the file argument might be missing from the fs event. Try to detect what\n   * change by detecting if something was deleted or the most recent file change.\n   *\n   * @param {string} dir\n   * @param {string} event\n   * @param {string} file\n   * @public\n   */\n\n  detectChangedFile(dir, event, callback) {\n    if (!this.dirRegistery[dir]) {\n      return;\n    }\n\n    let found = false;\n    let closest = {\n      mtime: 0\n    };\n    let c = 0;\n    Object.keys(this.dirRegistery[dir]).forEach(function (file, i, arr) {\n      fs.lstat(path.join(dir, file), (error, stat) => {\n        if (found) {\n          return;\n        }\n\n        if (error) {\n          if (isIgnorableFileError(error)) {\n            found = true;\n            callback(file);\n          } else {\n            this.emit('error', error);\n          }\n        } else {\n          if (stat.mtime > closest.mtime) {\n            stat.file = file;\n            closest = stat;\n          }\n\n          if (arr.length === ++c) {\n            callback(closest.file);\n          }\n        }\n      });\n    }, this);\n  }\n  /**\n   * Normalize fs events and pass it on to be processed.\n   *\n   * @param {string} dir\n   * @param {string} event\n   * @param {string} file\n   * @public\n   */\n\n  normalizeChange(dir, event, file) {\n    if (!file) {\n      this.detectChangedFile(dir, event, actualFile => {\n        if (actualFile) {\n          this.processChange(dir, event, actualFile);\n        }\n      });\n    } else {\n      this.processChange(dir, event, path.normalize(file));\n    }\n  }\n  /**\n   * Process changes.\n   *\n   * @param {string} dir\n   * @param {string} event\n   * @param {string} file\n   * @public\n   */\n\n  processChange(dir, event, file) {\n    const fullPath = path.join(dir, file);\n    const relativePath = path.join(path.relative(this.root, dir), file);\n    fs.lstat(fullPath, (error, stat) => {\n      if (error && error.code !== 'ENOENT') {\n        this.emit('error', error);\n      } else if (!error && stat.isDirectory()) {\n        // win32 emits usless change events on dirs.\n        if (event !== 'change') {\n          this.watchdir(fullPath);\n\n          if (\n            common.isFileIncluded(\n              this.globs,\n              this.dot,\n              this.doIgnore,\n              relativePath\n            )\n          ) {\n            this.emitEvent(ADD_EVENT, relativePath, stat);\n          }\n        }\n      } else {\n        const registered = this.registered(fullPath);\n\n        if (error && error.code === 'ENOENT') {\n          this.unregister(fullPath);\n          this.stopWatching(fullPath);\n          this.unregisterDir(fullPath);\n\n          if (registered) {\n            this.emitEvent(DELETE_EVENT, relativePath);\n          }\n        } else if (registered) {\n          this.emitEvent(CHANGE_EVENT, relativePath, stat);\n        } else {\n          if (this.register(fullPath)) {\n            this.emitEvent(ADD_EVENT, relativePath, stat);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Triggers a 'change' event after debounding it to take care of duplicate\n   * events on os x.\n   *\n   * @private\n   */\n\n  emitEvent(type, file, stat) {\n    const key = type + '-' + file;\n    const addKey = ADD_EVENT + '-' + file;\n\n    if (type === CHANGE_EVENT && this.changeTimers[addKey]) {\n      // Ignore the change event that is immediately fired after an add event.\n      // (This happens on Linux).\n      return;\n    }\n\n    clearTimeout(this.changeTimers[key]);\n    this.changeTimers[key] = setTimeout(() => {\n      delete this.changeTimers[key];\n\n      if (type === ADD_EVENT && stat.isDirectory()) {\n        // Recursively emit add events and watch for sub-files/folders\n        common.recReaddir(\n          path.resolve(this.root, file),\n          function emitAddDir(dir, stats) {\n            this.watchdir(dir);\n            this.rawEmitEvent(ADD_EVENT, path.relative(this.root, dir), stats);\n          }.bind(this),\n          function emitAddFile(file, stats) {\n            this.register(file);\n            this.rawEmitEvent(ADD_EVENT, path.relative(this.root, file), stats);\n          }.bind(this),\n          function endCallback() {},\n          this.checkedEmitError,\n          this.ignored\n        );\n      } else {\n        this.rawEmitEvent(type, file, stat);\n      }\n    }, DEFAULT_DELAY);\n  }\n  /**\n   * Actually emit the events\n   */\n\n  rawEmitEvent(type, file, stat) {\n    this.emit(type, file, this.root, stat);\n    this.emit(ALL_EVENT, type, file, this.root, stat);\n  }\n};\n/**\n * Determine if a given FS error can be ignored\n *\n * @private\n */\n\nfunction isIgnorableFileError(error) {\n  return (\n    error.code === 'ENOENT' || // Workaround Windows node issue #4337.\n    (error.code === 'EPERM' && platform === 'win32')\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}