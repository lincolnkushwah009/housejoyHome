{"ast":null,"code":"'use strict';\n\nconst array = [];\nconst charCodeCache = [];\n\nconst leven = (left, right) => {\n  if (left === right) {\n    return 0;\n  }\n\n  const swap = left; // Swapping the strings if `a` is longer than `b` so we know which one is the\n  // shortest & which one is the longest\n\n  if (left.length > right.length) {\n    left = right;\n    right = swap;\n  }\n\n  let leftLength = left.length;\n  let rightLength = right.length; // Performing suffix trimming:\n  // We can linearly drop suffix common to both strings since they\n  // don't increase distance at all\n  // Note: `~-` is the bitwise way to perform a `- 1` operation\n\n  while (leftLength > 0 && left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength)) {\n    leftLength--;\n    rightLength--;\n  } // Performing prefix trimming\n  // We can linearly drop prefix common to both strings since they\n  // don't increase distance at all\n\n\n  let start = 0;\n\n  while (start < leftLength && left.charCodeAt(start) === right.charCodeAt(start)) {\n    start++;\n  }\n\n  leftLength -= start;\n  rightLength -= start;\n\n  if (leftLength === 0) {\n    return rightLength;\n  }\n\n  let bCharCode;\n  let result;\n  let temp;\n  let temp2;\n  let i = 0;\n  let j = 0;\n\n  while (i < leftLength) {\n    charCodeCache[i] = left.charCodeAt(start + i);\n    array[i] = ++i;\n  }\n\n  while (j < rightLength) {\n    bCharCode = right.charCodeAt(start + j);\n    temp = j++;\n    result = j;\n\n    for (i = 0; i < leftLength; i++) {\n      temp2 = bCharCode === charCodeCache[i] ? temp : temp + 1;\n      temp = array[i]; // eslint-disable-next-line no-multi-assign\n\n      result = array[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = leven; // TODO: Remove this for the next major release\n\nmodule.exports.default = leven;","map":{"version":3,"names":["array","charCodeCache","leven","left","right","swap","length","leftLength","rightLength","charCodeAt","start","bCharCode","result","temp","temp2","i","j","module","exports","default"],"sources":["/Users/lincolnkushwah/Desktop/All/React Projects/house_joy_new/node_modules/leven/index.js"],"sourcesContent":["'use strict';\nconst array = [];\nconst charCodeCache = [];\n\nconst leven = (left, right) => {\n\tif (left === right) {\n\t\treturn 0;\n\t}\n\n\tconst swap = left;\n\n\t// Swapping the strings if `a` is longer than `b` so we know which one is the\n\t// shortest & which one is the longest\n\tif (left.length > right.length) {\n\t\tleft = right;\n\t\tright = swap;\n\t}\n\n\tlet leftLength = left.length;\n\tlet rightLength = right.length;\n\n\t// Performing suffix trimming:\n\t// We can linearly drop suffix common to both strings since they\n\t// don't increase distance at all\n\t// Note: `~-` is the bitwise way to perform a `- 1` operation\n\twhile (leftLength > 0 && (left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength))) {\n\t\tleftLength--;\n\t\trightLength--;\n\t}\n\n\t// Performing prefix trimming\n\t// We can linearly drop prefix common to both strings since they\n\t// don't increase distance at all\n\tlet start = 0;\n\n\twhile (start < leftLength && (left.charCodeAt(start) === right.charCodeAt(start))) {\n\t\tstart++;\n\t}\n\n\tleftLength -= start;\n\trightLength -= start;\n\n\tif (leftLength === 0) {\n\t\treturn rightLength;\n\t}\n\n\tlet bCharCode;\n\tlet result;\n\tlet temp;\n\tlet temp2;\n\tlet i = 0;\n\tlet j = 0;\n\n\twhile (i < leftLength) {\n\t\tcharCodeCache[i] = left.charCodeAt(start + i);\n\t\tarray[i] = ++i;\n\t}\n\n\twhile (j < rightLength) {\n\t\tbCharCode = right.charCodeAt(start + j);\n\t\ttemp = j++;\n\t\tresult = j;\n\n\t\tfor (i = 0; i < leftLength; i++) {\n\t\t\ttemp2 = bCharCode === charCodeCache[i] ? temp : temp + 1;\n\t\t\ttemp = array[i];\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tresult = array[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;\n\t\t}\n\t}\n\n\treturn result;\n};\n\nmodule.exports = leven;\n// TODO: Remove this for the next major release\nmodule.exports.default = leven;\n"],"mappings":"AAAA;;AACA,MAAMA,KAAK,GAAG,EAAd;AACA,MAAMC,aAAa,GAAG,EAAtB;;AAEA,MAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;EAC9B,IAAID,IAAI,KAAKC,KAAb,EAAoB;IACnB,OAAO,CAAP;EACA;;EAED,MAAMC,IAAI,GAAGF,IAAb,CAL8B,CAO9B;EACA;;EACA,IAAIA,IAAI,CAACG,MAAL,GAAcF,KAAK,CAACE,MAAxB,EAAgC;IAC/BH,IAAI,GAAGC,KAAP;IACAA,KAAK,GAAGC,IAAR;EACA;;EAED,IAAIE,UAAU,GAAGJ,IAAI,CAACG,MAAtB;EACA,IAAIE,WAAW,GAAGJ,KAAK,CAACE,MAAxB,CAf8B,CAiB9B;EACA;EACA;EACA;;EACA,OAAOC,UAAU,GAAG,CAAb,IAAmBJ,IAAI,CAACM,UAAL,CAAgB,CAAC,CAACF,UAAlB,MAAkCH,KAAK,CAACK,UAAN,CAAiB,CAAC,CAACD,WAAnB,CAA5D,EAA8F;IAC7FD,UAAU;IACVC,WAAW;EACX,CAxB6B,CA0B9B;EACA;EACA;;;EACA,IAAIE,KAAK,GAAG,CAAZ;;EAEA,OAAOA,KAAK,GAAGH,UAAR,IAAuBJ,IAAI,CAACM,UAAL,CAAgBC,KAAhB,MAA2BN,KAAK,CAACK,UAAN,CAAiBC,KAAjB,CAAzD,EAAmF;IAClFA,KAAK;EACL;;EAEDH,UAAU,IAAIG,KAAd;EACAF,WAAW,IAAIE,KAAf;;EAEA,IAAIH,UAAU,KAAK,CAAnB,EAAsB;IACrB,OAAOC,WAAP;EACA;;EAED,IAAIG,SAAJ;EACA,IAAIC,MAAJ;EACA,IAAIC,IAAJ;EACA,IAAIC,KAAJ;EACA,IAAIC,CAAC,GAAG,CAAR;EACA,IAAIC,CAAC,GAAG,CAAR;;EAEA,OAAOD,CAAC,GAAGR,UAAX,EAAuB;IACtBN,aAAa,CAACc,CAAD,CAAb,GAAmBZ,IAAI,CAACM,UAAL,CAAgBC,KAAK,GAAGK,CAAxB,CAAnB;IACAf,KAAK,CAACe,CAAD,CAAL,GAAW,EAAEA,CAAb;EACA;;EAED,OAAOC,CAAC,GAAGR,WAAX,EAAwB;IACvBG,SAAS,GAAGP,KAAK,CAACK,UAAN,CAAiBC,KAAK,GAAGM,CAAzB,CAAZ;IACAH,IAAI,GAAGG,CAAC,EAAR;IACAJ,MAAM,GAAGI,CAAT;;IAEA,KAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGR,UAAhB,EAA4BQ,CAAC,EAA7B,EAAiC;MAChCD,KAAK,GAAGH,SAAS,KAAKV,aAAa,CAACc,CAAD,CAA3B,GAAiCF,IAAjC,GAAwCA,IAAI,GAAG,CAAvD;MACAA,IAAI,GAAGb,KAAK,CAACe,CAAD,CAAZ,CAFgC,CAGhC;;MACAH,MAAM,GAAGZ,KAAK,CAACe,CAAD,CAAL,GAAWF,IAAI,GAAGD,MAAP,GAAgBE,KAAK,GAAGF,MAAR,GAAiBA,MAAM,GAAG,CAA1B,GAA8BE,KAA9C,GAAsDA,KAAK,GAAGD,IAAR,GAAeA,IAAI,GAAG,CAAtB,GAA0BC,KAApG;IACA;EACD;;EAED,OAAOF,MAAP;AACA,CApED;;AAsEAK,MAAM,CAACC,OAAP,GAAiBhB,KAAjB,C,CACA;;AACAe,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBjB,KAAzB"},"metadata":{},"sourceType":"script"}