{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getMaxWorkers;\n\nfunction _os() {\n  const data = require('os');\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction getMaxWorkers(argv, defaultOptions) {\n  if (argv.runInBand) {\n    return 1;\n  } else if (argv.maxWorkers) {\n    return parseWorkers(argv.maxWorkers);\n  } else if (defaultOptions && defaultOptions.maxWorkers) {\n    return parseWorkers(defaultOptions.maxWorkers);\n  } else {\n    var _cpusInfo$length; // In watch mode, Jest should be unobtrusive and not use all available CPUs.\n\n\n    const cpusInfo = (0, _os().cpus)();\n    const numCpus = (_cpusInfo$length = cpusInfo === null || cpusInfo === void 0 ? void 0 : cpusInfo.length) !== null && _cpusInfo$length !== void 0 ? _cpusInfo$length : 1;\n    const isWatchModeEnabled = argv.watch || argv.watchAll;\n    return Math.max(isWatchModeEnabled ? Math.floor(numCpus / 2) : numCpus - 1, 1);\n  }\n}\n\nconst parseWorkers = maxWorkers => {\n  const parsed = parseInt(maxWorkers.toString(), 10);\n\n  if (typeof maxWorkers === 'string' && maxWorkers.trim().endsWith('%') && parsed > 0 && parsed <= 100) {\n    const numCpus = (0, _os().cpus)().length;\n    const workers = Math.floor(parsed / 100 * numCpus);\n    return Math.max(workers, 1);\n  }\n\n  return parsed > 0 ? parsed : 1;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","default","getMaxWorkers","_os","data","require","argv","defaultOptions","runInBand","maxWorkers","parseWorkers","_cpusInfo$length","cpusInfo","cpus","numCpus","length","isWatchModeEnabled","watch","watchAll","Math","max","floor","parsed","parseInt","toString","trim","endsWith","workers"],"sources":["/Users/lincolnkushwah/Desktop/All/React Projects/house_joy_new/node_modules/jest-config/build/getMaxWorkers.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = getMaxWorkers;\n\nfunction _os() {\n  const data = require('os');\n\n  _os = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction getMaxWorkers(argv, defaultOptions) {\n  if (argv.runInBand) {\n    return 1;\n  } else if (argv.maxWorkers) {\n    return parseWorkers(argv.maxWorkers);\n  } else if (defaultOptions && defaultOptions.maxWorkers) {\n    return parseWorkers(defaultOptions.maxWorkers);\n  } else {\n    var _cpusInfo$length;\n\n    // In watch mode, Jest should be unobtrusive and not use all available CPUs.\n    const cpusInfo = (0, _os().cpus)();\n    const numCpus =\n      (_cpusInfo$length =\n        cpusInfo === null || cpusInfo === void 0 ? void 0 : cpusInfo.length) !==\n        null && _cpusInfo$length !== void 0\n        ? _cpusInfo$length\n        : 1;\n    const isWatchModeEnabled = argv.watch || argv.watchAll;\n    return Math.max(\n      isWatchModeEnabled ? Math.floor(numCpus / 2) : numCpus - 1,\n      1\n    );\n  }\n}\n\nconst parseWorkers = maxWorkers => {\n  const parsed = parseInt(maxWorkers.toString(), 10);\n\n  if (\n    typeof maxWorkers === 'string' &&\n    maxWorkers.trim().endsWith('%') &&\n    parsed > 0 &&\n    parsed <= 100\n  ) {\n    const numCpus = (0, _os().cpus)().length;\n    const workers = Math.floor((parsed / 100) * numCpus);\n    return Math.max(workers, 1);\n  }\n\n  return parsed > 0 ? parsed : 1;\n};\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,SAASC,GAAT,GAAe;EACb,MAAMC,IAAI,GAAGC,OAAO,CAAC,IAAD,CAApB;;EAEAF,GAAG,GAAG,YAAY;IAChB,OAAOC,IAAP;EACD,CAFD;;EAIA,OAAOA,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,aAAT,CAAuBI,IAAvB,EAA6BC,cAA7B,EAA6C;EAC3C,IAAID,IAAI,CAACE,SAAT,EAAoB;IAClB,OAAO,CAAP;EACD,CAFD,MAEO,IAAIF,IAAI,CAACG,UAAT,EAAqB;IAC1B,OAAOC,YAAY,CAACJ,IAAI,CAACG,UAAN,CAAnB;EACD,CAFM,MAEA,IAAIF,cAAc,IAAIA,cAAc,CAACE,UAArC,EAAiD;IACtD,OAAOC,YAAY,CAACH,cAAc,CAACE,UAAhB,CAAnB;EACD,CAFM,MAEA;IACL,IAAIE,gBAAJ,CADK,CAGL;;;IACA,MAAMC,QAAQ,GAAG,CAAC,GAAGT,GAAG,GAAGU,IAAV,GAAjB;IACA,MAAMC,OAAO,GACX,CAACH,gBAAgB,GACfC,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACG,MAD/D,MAEE,IAFF,IAEUJ,gBAAgB,KAAK,KAAK,CAFpC,GAGIA,gBAHJ,GAII,CALN;IAMA,MAAMK,kBAAkB,GAAGV,IAAI,CAACW,KAAL,IAAcX,IAAI,CAACY,QAA9C;IACA,OAAOC,IAAI,CAACC,GAAL,CACLJ,kBAAkB,GAAGG,IAAI,CAACE,KAAL,CAAWP,OAAO,GAAG,CAArB,CAAH,GAA6BA,OAAO,GAAG,CADpD,EAEL,CAFK,CAAP;EAID;AACF;;AAED,MAAMJ,YAAY,GAAGD,UAAU,IAAI;EACjC,MAAMa,MAAM,GAAGC,QAAQ,CAACd,UAAU,CAACe,QAAX,EAAD,EAAwB,EAAxB,CAAvB;;EAEA,IACE,OAAOf,UAAP,KAAsB,QAAtB,IACAA,UAAU,CAACgB,IAAX,GAAkBC,QAAlB,CAA2B,GAA3B,CADA,IAEAJ,MAAM,GAAG,CAFT,IAGAA,MAAM,IAAI,GAJZ,EAKE;IACA,MAAMR,OAAO,GAAG,CAAC,GAAGX,GAAG,GAAGU,IAAV,IAAkBE,MAAlC;IACA,MAAMY,OAAO,GAAGR,IAAI,CAACE,KAAL,CAAYC,MAAM,GAAG,GAAV,GAAiBR,OAA5B,CAAhB;IACA,OAAOK,IAAI,CAACC,GAAL,CAASO,OAAT,EAAkB,CAAlB,CAAP;EACD;;EAED,OAAOL,MAAM,GAAG,CAAT,GAAaA,MAAb,GAAsB,CAA7B;AACD,CAfD"},"metadata":{},"sourceType":"script"}