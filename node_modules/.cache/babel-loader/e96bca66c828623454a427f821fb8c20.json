{"ast":null,"code":"module.exports = class CovLine {\n  constructor(line, startCol, lineStr) {\n    this.line = line; // note that startCol and endCol are absolute positions\n    // within a file, not relative to the line.\n\n    this.startCol = startCol; // the line length itself does not include the newline characters,\n    // these are however taken into account when enumerating absolute offset.\n\n    const matchedNewLineChar = lineStr.match(/\\r?\\n$/u);\n    const newLineLength = matchedNewLineChar ? matchedNewLineChar[0].length : 0;\n    this.endCol = startCol + lineStr.length - newLineLength; // we start with all lines having been executed, and work\n    // backwards zeroing out lines based on V8 output.\n\n    this.count = 1; // set by source.js during parsing, if /* c8 ignore next */ is found.\n\n    this.ignore = false;\n  }\n\n  toIstanbul() {\n    return {\n      start: {\n        line: this.line,\n        column: 0\n      },\n      end: {\n        line: this.line,\n        column: this.endCol - this.startCol\n      }\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","CovLine","constructor","line","startCol","lineStr","matchedNewLineChar","match","newLineLength","length","endCol","count","ignore","toIstanbul","start","column","end"],"sources":["/Users/lincolnkushwah/Desktop/All/React Projects/house_joy_new/node_modules/v8-to-istanbul/lib/line.js"],"sourcesContent":["module.exports = class CovLine {\n  constructor (line, startCol, lineStr) {\n    this.line = line\n    // note that startCol and endCol are absolute positions\n    // within a file, not relative to the line.\n    this.startCol = startCol\n\n    // the line length itself does not include the newline characters,\n    // these are however taken into account when enumerating absolute offset.\n    const matchedNewLineChar = lineStr.match(/\\r?\\n$/u)\n    const newLineLength = matchedNewLineChar ? matchedNewLineChar[0].length : 0\n    this.endCol = startCol + lineStr.length - newLineLength\n\n    // we start with all lines having been executed, and work\n    // backwards zeroing out lines based on V8 output.\n    this.count = 1\n\n    // set by source.js during parsing, if /* c8 ignore next */ is found.\n    this.ignore = false\n  }\n\n  toIstanbul () {\n    return {\n      start: {\n        line: this.line,\n        column: 0\n      },\n      end: {\n        line: this.line,\n        column: this.endCol - this.startCol\n      }\n    }\n  }\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,OAAN,CAAc;EAC7BC,WAAW,CAAEC,IAAF,EAAQC,QAAR,EAAkBC,OAAlB,EAA2B;IACpC,KAAKF,IAAL,GAAYA,IAAZ,CADoC,CAEpC;IACA;;IACA,KAAKC,QAAL,GAAgBA,QAAhB,CAJoC,CAMpC;IACA;;IACA,MAAME,kBAAkB,GAAGD,OAAO,CAACE,KAAR,CAAc,SAAd,CAA3B;IACA,MAAMC,aAAa,GAAGF,kBAAkB,GAAGA,kBAAkB,CAAC,CAAD,CAAlB,CAAsBG,MAAzB,GAAkC,CAA1E;IACA,KAAKC,MAAL,GAAcN,QAAQ,GAAGC,OAAO,CAACI,MAAnB,GAA4BD,aAA1C,CAVoC,CAYpC;IACA;;IACA,KAAKG,KAAL,GAAa,CAAb,CAdoC,CAgBpC;;IACA,KAAKC,MAAL,GAAc,KAAd;EACD;;EAEDC,UAAU,GAAI;IACZ,OAAO;MACLC,KAAK,EAAE;QACLX,IAAI,EAAE,KAAKA,IADN;QAELY,MAAM,EAAE;MAFH,CADF;MAKLC,GAAG,EAAE;QACHb,IAAI,EAAE,KAAKA,IADR;QAEHY,MAAM,EAAE,KAAKL,MAAL,GAAc,KAAKN;MAFxB;IALA,CAAP;EAUD;;AAhC4B,CAA/B"},"metadata":{},"sourceType":"script"}